{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Oh-Numpy","text":"<p>100 numpy exercises\u4e2d\u6587\u7248\u3002</p> <p>\u6ce8\u610fNotebook\u6587\u4ef6\u5728\u8fd9\u91cc: docs/100-Numpy-Exercises.ipynb.</p>"},{"location":"#_1","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"#_2","title":"\u6267\u884c\u4ee3\u7801","text":"<ol> <li>Install uv</li> <li>Clone the project</li> <li>Run <code>uv sync --all-extras --dev</code></li> <li>Run <code>jupyter lab</code></li> <li>Open <code>docs/100-Numpy-Exercises.ipynb</code> and run it</li> </ol>"},{"location":"#_3","title":"\u5728\u7ebf\u9605\u8bfb","text":"<p>https://datahonor.com/Oh-PyTorch/100-PyTorch-Exercises/</p>"},{"location":"100-Numpy-Exercises/","title":"Oh-Numpy","text":"In\u00a0[1]: Copied! <pre>import numpy as np\n</pre> import numpy as np In\u00a0[2]: Copied! <pre>np.__version__\n</pre> np.__version__ Out[2]: <pre>'1.16.2'</pre> In\u00a0[3]: Copied! <pre>np.show_config()\n</pre> np.show_config() <pre>mkl_info:\n    libraries = ['mkl_rt', 'pthread']\n    library_dirs = ['/home/shensir/anaconda3/lib']\n    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]\n    include_dirs = ['/home/shensir/anaconda3/include']\nblas_mkl_info:\n    libraries = ['mkl_rt', 'pthread']\n    library_dirs = ['/home/shensir/anaconda3/lib']\n    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]\n    include_dirs = ['/home/shensir/anaconda3/include']\nblas_opt_info:\n    libraries = ['mkl_rt', 'pthread']\n    library_dirs = ['/home/shensir/anaconda3/lib']\n    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]\n    include_dirs = ['/home/shensir/anaconda3/include']\nlapack_mkl_info:\n    libraries = ['mkl_rt', 'pthread']\n    library_dirs = ['/home/shensir/anaconda3/lib']\n    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]\n    include_dirs = ['/home/shensir/anaconda3/include']\nlapack_opt_info:\n    libraries = ['mkl_rt', 'pthread']\n    library_dirs = ['/home/shensir/anaconda3/lib']\n    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]\n    include_dirs = ['/home/shensir/anaconda3/include']\n</pre> In\u00a0[4]: Copied! <pre>z = np.zeros(10)\nz\n</pre> z = np.zeros(10) z Out[4]: <pre>array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])</pre> In\u00a0[5]: Copied! <pre>z = np.zeros((10, 10))\nprint(\"%d bytes\" % (z.size * z.itemsize))\n</pre> z = np.zeros((10, 10)) print(\"%d bytes\" % (z.size * z.itemsize)) <pre>800 bytes\n</pre> <p>\u6ce8\u610f\u8fd9\u91cc\u5c31\u662f\u7b80\u5355\u7684\u628a\u603b\u5143\u7d20\u4e2a\u6570<code>z.size</code>\uff08100\uff09\uff0c \u4e58\u4e0a\u5355\u4e2a\u5143\u7d20\u6240\u5360\u7684\u5185\u5b58<code>z.itemsize</code>(8 bytes).</p> <p>\u8fd9\u91cc\u4e3b\u8981\u662f\u6709\u5173\u547d\u4ee4\u884c\u8c03\u7528Python\u7684\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4ece<code>python --help</code>\u5f00\u59cb\uff0c \u627e\u5230<code>python -c</code>\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u9700\u8981\u5728\u547d\u4ee4\u884c\u6267\u884c<code>python -c \"import numpy; numpy.info(numpy.add)\"</code>\u5373\u53ef\u3002\u5c31\u7b49\u540c\u4e8e\u5728Python\u89e3\u91ca\u5668\u4e2d\u6267\u884c\u5982\u4e0b\u7a0b\u5e8f\uff1a</p> <pre>import numpy\nnumpy.info(numpy.add)\n</pre> <p>\u6b64\u5916\uff0c\u9488\u5bf9Numpy,\u6211\u4eec\u53ef\u4ee5\u6709\u5f88\u591a\u79cd\u65b9\u5f0f\u67e5\u770b\u6587\u6863:\u4e0a\u9762\u7684<code>np.info(np.add)</code>, \u4ee5\u53ca\u5229\u7528help\u7684<code>help(np.add)</code>, \u548c\u6bd4\u8f83\u5c11\u7528\u7684doc\u65b9\u6cd5\u7684\u8c03\u7528<code>print(np.add.__doc__)</code>\uff08\u8f93\u51fa\u548c<code>np.info</code>\u4e00\u81f4\uff09, \u4e00\u822c\u6765\u8bf4\u7528<code>np.info</code>\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e5f\u6bd4\u8f83\u65b9\u4fbf\u3002\u5982\u679c\u4f7f\u7528<code>IPython</code>\u7684\u8bdd\uff0c\u53ef\u4ee5\u76f4\u63a5<code>np.add?</code>\u56de\u8f66</p> In\u00a0[6]: Copied! <pre>z = np.zeros(10)\nz[4] = 1\nz\n</pre> z = np.zeros(10) z[4] = 1 z Out[6]: <pre>array([0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])</pre> In\u00a0[7]: Copied! <pre>z = np.arange(10, 50)\nz\n</pre> z = np.arange(10, 50) z Out[7]: <pre>array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\n       27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\n       44, 45, 46, 47, 48, 49])</pre> <p>\u6ce8\u610fPython\u4e5f\u6709\u5185\u5efa\u51fd\u6570<code>range</code>\u5177\u6709\u76f8\u4f3c\u7684\u529f\u80fd\uff0c\u76f8\u5bf9\u800c\u8a00\uff0cNumpy\u7684<code>arange</code>\u7531\u4e8e\u4f7f\u7528\u4e86\u5185\u5b58\u4f18\u5316\u6280\u672f\uff0c\u5176\u6548\u7387\u8981\u9ad8\u5f88\u591a\u3002\u6211\u4eec\u53ef\u4ee5\u505a\u4e2a\u7b80\u5355\u7684\u6c34\u5e73\u5bf9\u6bd4\u3002\u4f8b\u5b50\u6765\u81eaScipy Lecture Notes</p> In\u00a0[8]: Copied! <pre>%timeit [i**2 for i in range(1000)]\n</pre> %timeit [i**2 for i in range(1000)] <pre>317 \u00b5s \u00b1 7.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</pre> In\u00a0[9]: Copied! <pre>%timeit a = np.arange(1000) ** 2\n</pre> %timeit a = np.arange(1000) ** 2 <pre>5.13 \u00b5s \u00b1 842 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n</pre> In\u00a0[10]: Copied! <pre>z = np.arange(10)\nz\n</pre> z = np.arange(10) z Out[10]: <pre>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</pre> In\u00a0[11]: Copied! <pre>z = z[::-1]\nz\n</pre> z = z[::-1] z Out[11]: <pre>array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])</pre> In\u00a0[12]: Copied! <pre>z = np.arange(0, 9).reshape(3, 3)\nz\n</pre> z = np.arange(0, 9).reshape(3, 3) z Out[12]: <pre>array([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])</pre> <p>\u8fd9\u91cc\u53ef\u4ee5\u5728\u539f\u9898\u76ee\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u62d3\u5c55\uff0c\u4e0a\u9762\u7684\u5b9e\u73b0\u4e2d0\u52308\u662f\u53ef\u4ee5\u770b\u4f5c\u4ee5\u884c\u4e3a\u987a\u5e8f\uff0c\u5982\u6211\u6211\u4eec\u5e0c\u671b0\u52308\u4ee5\u5217\u4e3a\u987a\u5e8f\u6392\u5217\u5462\uff1f</p> In\u00a0[13]: Copied! <pre># \u5217\u4e3a\u987a\u5e8f\nz = np.arange(0, 9).reshape(3, 3).T\nz\n</pre> # \u5217\u4e3a\u987a\u5e8f z = np.arange(0, 9).reshape(3, 3).T z Out[13]: <pre>array([[0, 3, 6],\n       [1, 4, 7],\n       [2, 5, 8]])</pre> <p>\u5176\u5b9e\u53ea\u9700\u8981\u628a\u539f\u6765\u7684\u77e9\u9635\u8f6c\u7f6e\u5c31\u53ef\u4ee5\u4e86:-)</p> In\u00a0[14]: Copied! <pre>z = np.array([1,2,0,0,4,0])\nz.nonzero()\n</pre> z = np.array([1,2,0,0,4,0]) z.nonzero() Out[14]: <pre>(array([0, 1, 4]),)</pre> In\u00a0[15]: Copied! <pre>z = np.eye(3)\nz\n</pre> z = np.eye(3) z Out[15]: <pre>array([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])</pre> In\u00a0[16]: Copied! <pre>z = np.random.random((3, 3, 3))\nz\n</pre> z = np.random.random((3, 3, 3)) z Out[16]: <pre>array([[[0.22223755, 0.02993117, 0.4890893 ],\n        [0.0820244 , 0.67123686, 0.30827137],\n        [0.7508472 , 0.81738707, 0.84870083]],\n\n       [[0.65084705, 0.40438861, 0.04736435],\n        [0.09258906, 0.50895712, 0.34483339],\n        [0.91449234, 0.16814904, 0.86294636]],\n\n       [[0.56517313, 0.13952306, 0.76674818],\n        [0.04259055, 0.28120883, 0.13086924],\n        [0.11580096, 0.91740276, 0.24734521]]])</pre> In\u00a0[17]: Copied! <pre>z = np.random.random((10, 10))\nz\n</pre> z = np.random.random((10, 10)) z Out[17]: <pre>array([[0.12752282, 0.79054209, 0.50129149, 0.58857169, 0.35450135,\n        0.39841021, 0.17807883, 0.88929081, 0.97780616, 0.773384  ],\n       [0.90780362, 0.64876217, 0.0585608 , 0.26701752, 0.76980913,\n        0.28396342, 0.86735689, 0.0125925 , 0.40396858, 0.14115772],\n       [0.8098699 , 0.61503945, 0.30412717, 0.09408111, 0.45769837,\n        0.47180697, 0.92817308, 0.68631218, 0.17004323, 0.48279816],\n       [0.58715196, 0.2383897 , 0.28221602, 0.08891016, 0.16125275,\n        0.00269889, 0.20931989, 0.18024097, 0.11391687, 0.73651609],\n       [0.25771839, 0.85886099, 0.13783206, 0.92036633, 0.47577829,\n        0.9711062 , 0.32103083, 0.70490514, 0.52713121, 0.19038581],\n       [0.30706035, 0.67517319, 0.32025366, 0.08029852, 0.72571681,\n        0.07372837, 0.86243916, 0.25484642, 0.70585143, 0.08274462],\n       [0.74795535, 0.8067741 , 0.89113355, 0.47931097, 0.10301097,\n        0.4847746 , 0.92899191, 0.12575855, 0.88174842, 0.47706755],\n       [0.92802187, 0.66522839, 0.2899387 , 0.46113872, 0.28817592,\n        0.20630832, 0.39909759, 0.23957712, 0.98647748, 0.14215   ],\n       [0.05693348, 0.35706197, 0.0287801 , 0.2528074 , 0.13481535,\n        0.2227437 , 0.68933693, 0.19408625, 0.20216115, 0.99834648],\n       [0.0363542 , 0.26831658, 0.50569523, 0.19128829, 0.53549785,\n        0.49938433, 0.9457238 , 0.31700083, 0.19944951, 0.03825154]])</pre> In\u00a0[18]: Copied! <pre>z.max(), z.min()\n</pre> z.max(), z.min() Out[18]: <pre>(0.9983464750382925, 0.0026988893597477137)</pre> In\u00a0[19]: Copied! <pre>z = np.random.random((10))\nz\n</pre> z = np.random.random((10)) z Out[19]: <pre>array([0.32286031, 0.59936123, 0.6659822 , 0.00112788, 0.71261922,\n       0.07623688, 0.23427983, 0.70193797, 0.31707463, 0.6425674 ])</pre> In\u00a0[20]: Copied! <pre>z.mean()\n</pre> z.mean() Out[20]: <pre>0.4274047541501854</pre> In\u00a0[21]: Copied! <pre>z = np.ones((5, 5))\nz[1:-1, 1:-1] = 0\nz\n</pre> z = np.ones((5, 5)) z[1:-1, 1:-1] = 0 z Out[21]: <pre>array([[1., 1., 1., 1., 1.],\n       [1., 0., 0., 0., 1.],\n       [1., 0., 0., 0., 1.],\n       [1., 0., 0., 0., 1.],\n       [1., 1., 1., 1., 1.]])</pre> In\u00a0[22]: Copied! <pre>z = np.ones((5, 5))\nz\n</pre> z = np.ones((5, 5)) z Out[22]: <pre>array([[1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.]])</pre> In\u00a0[23]: Copied! <pre>m = np.pad(z, (1, 1), mode='constant', constant_values=0)\nm\n</pre> m = np.pad(z, (1, 1), mode='constant', constant_values=0) m Out[23]: <pre>array([[0., 0., 0., 0., 0., 0., 0.],\n       [0., 1., 1., 1., 1., 1., 0.],\n       [0., 1., 1., 1., 1., 1., 0.],\n       [0., 1., 1., 1., 1., 1., 0.],\n       [0., 1., 1., 1., 1., 1., 0.],\n       [0., 1., 1., 1., 1., 1., 0.],\n       [0., 0., 0., 0., 0., 0., 0.]])</pre> In\u00a0[24]: Copied! <pre>0 * np.nan\n</pre> 0 * np.nan Out[24]: <pre>nan</pre> <p>\u6709<code>np.nan</code>\u53c2\u4e0e\u7684\u7b97\u672f\u64cd\u4f5c\u8fd4\u56de\u5747\u4e3a<code>np.nan</code></p> In\u00a0[25]: Copied! <pre>np.nan == np.nan\n</pre> np.nan == np.nan Out[25]: <pre>False</pre> <p>\u8fd9\u91cc\u662f\u5408\u7406\u7684\uff0c\u6bd4\u5982\u6211\u4eec\u4ece\u6570\u636e\u96c6\u8bfb\u51fa\u4e24\u5217\u6570\u636e\u5168\u90e8\u662f<code>np.nan</code>\uff0c \u5982\u679c\u4e0a\u9762\u7684\u8868\u8fbe\u5f0f\u8bbe\u8ba1\u4e3a\u8fd4\u56de<code>True</code>\uff0c \u90a3\u4e48\u6211\u4eec\u5728\u5b8c\u5168\u4e0d\u77e5\u9053\u4e24\u5217\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u5c31\u5224\u5b9a\u4e8c\u8005\u662f\u76f8\u7b49\u7684\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u5408\u7406\u7684\u3002\u6240\u4ee5\u8fd9\u91cc\u8fd4\u56de\u7684\u662f<code>False</code>.</p> In\u00a0[26]: Copied! <pre>np.inf &gt; np.nan\n</pre> np.inf &gt; np.nan Out[26]: <pre>False</pre> <p>\u540c\u6837\u5730\uff0c\u6211\u4eec\u4e0d\u80fd\u6bd4\u8f83\u65e0\u7a77\u5927\u4e0e\u7f3a\u5931\u503c\u7684\u5927\u5c0f</p> In\u00a0[27]: Copied! <pre>np.nan in set([np.nan])\n</pre> np.nan in set([np.nan]) Out[27]: <pre>True</pre> In\u00a0[28]: Copied! <pre>0.3 == 3 * 0.1\n</pre> 0.3 == 3 * 0.1 Out[28]: <pre>False</pre> <p>\u7531\u4e8e\u6d6e\u70b9\u6570\uff08<code>float</code>\uff09\u8fd0\u7b97\u5b58\u5728\u8bef\u5dee\uff0c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u6bd4\u8f83\u5176\u5927\u5c0f\u3002Numpy\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86<code>np.allclose</code>\u51fd\u6570\u6765\u6bd4\u8f83\u6d6e\u70b9\u6570\u4e4b\u95f4\u7684\u8fd1\u4f3c\u76f8\u7b49\u3002\u6b64\u5916\uff0c\u6b64\u51fd\u6570\u8fd8\u652f\u6301<code>np.ndarray</code>\u7684\u6bd4\u8f83\u3002</p> In\u00a0[29]: Copied! <pre>np.allclose(0.3, 3 * 0.1)\n</pre> np.allclose(0.3, 3 * 0.1) Out[29]: <pre>True</pre> In\u00a0[30]: Copied! <pre>z = np.diag(np.arange(1, 5), k=-1)\nz\n</pre> z = np.diag(np.arange(1, 5), k=-1) z Out[30]: <pre>array([[0, 0, 0, 0, 0],\n       [1, 0, 0, 0, 0],\n       [0, 2, 0, 0, 0],\n       [0, 0, 3, 0, 0],\n       [0, 0, 0, 4, 0]])</pre> In\u00a0[31]: Copied! <pre>z = np.zeros((8, 8))\nz[1::2, ::2] = 1  # \u7b2c2, 4, 6, 8\u884c\u586b\u5145\nz[::2, 1::2] = 1  # \u7b2c1\uff0c 3\uff0c 5\uff0c 7\u884c\u586b\u5145\nz\n</pre> z = np.zeros((8, 8)) z[1::2, ::2] = 1  # \u7b2c2, 4, 6, 8\u884c\u586b\u5145 z[::2, 1::2] = 1  # \u7b2c1\uff0c 3\uff0c 5\uff0c 7\u884c\u586b\u5145 z Out[31]: <pre>array([[0., 1., 0., 1., 0., 1., 0., 1.],\n       [1., 0., 1., 0., 1., 0., 1., 0.],\n       [0., 1., 0., 1., 0., 1., 0., 1.],\n       [1., 0., 1., 0., 1., 0., 1., 0.],\n       [0., 1., 0., 1., 0., 1., 0., 1.],\n       [1., 0., 1., 0., 1., 0., 1., 0.],\n       [0., 1., 0., 1., 0., 1., 0., 1.],\n       [1., 0., 1., 0., 1., 0., 1., 0.]])</pre> In\u00a0[32]: Copied! <pre>print(np.unravel_index(99, (6, 7, 8)))\n</pre> print(np.unravel_index(99, (6, 7, 8))) <pre>(1, 5, 3)\n</pre> <p>\u4e0a\u9762\u7684\u662f\u7ed9\u51fa\u7684\u7b54\u6848\uff0c\u4e00\u5f00\u59cb\u6211\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\uff0c\u91c7\u7528\u4e86\u4e0b\u9762\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u8003\u3002</p> In\u00a0[33]: Copied! <pre>z = np.arange(6*7*8).reshape(6, 7, 8)\nnp.where(z == 99)\n</pre> z = np.arange(6*7*8).reshape(6, 7, 8) np.where(z == 99) Out[33]: <pre>(array([1]), array([5]), array([3]))</pre> <p>\u8fd9\u662f\u901a\u8fc7Numpy\u627e\u51fa\u6765\u5177\u4f53\u4f4d\u7f6e\uff0c\u4f46\u662f\u5177\u4f53\u8ba1\u7b97\u7684\u65b9\u6cd5\u5e76\u672a\u7ed9\u51fa\uff0c\u8fd9\u91cc\u7b80\u5355\u89e3\u91ca\u4e0b\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5f62\u8c61\u7b2c\u8003\u8651\u201c\u6570\u7ec4\u7684\u7ef4\u5ea6\u8d8a\u5f80\u540e\uff0c\u5bf9\u5e94\u6570\u636e\u7684\u9897\u7c92\u5ea6\u8d8a\u5c0f\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a6x7x8\u7684\u7acb\u65b9\u4f53\u662f\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u6cd5\u6765\u6784\u5efa\u7684\uff1a\u5148\u5c06\u6240\u6709\u7684\u4e00\u5217\u503c(6 * 7 * 8)\u6392\u6210\u4e00\u884c\uff0c\u4e4b\u540e\u6bcf8\u4e2a\u7ec4\u6210\u4e00\u4e2a\u201c\u957f\u6761\u201d\uff0c \u8fd9\u6837\u5c31\u67096*7\u4e2a\u957f\u6761\uff1b\u4e4b\u540e\u5c06\u6bcf7\u4e2a\u957f\u6761\uff0c\u4e0a\u4e0b\u62fc\u63a5\uff0c\u94fa\u6210\u4e00\u4e2a\u5e73\u9762\uff1b\u8fd9\u6837\u6211\u4eec\u5c31\u67096\u4e2a\u5e73\u9762\uff0c\u5c06\u8fd96\u4e2a\u5e73\u9762\u5806\u8d77\u6765\uff0c\u5c31\u5f97\u5230\u4e86\u6211\u4eec\u6700\u7ec8\u7684\u201c\u7acb\u65b9\u4f53\u201d\u3002</p> <p>\u90a3\u4e48\u7b2c100\u4e2a\u5143\u7d20\u53c8\u5728\u54ea\u91cc\u5462\uff1f\u4e3a\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u4ece\u201c\u9897\u7c92\u5ea6\u201d\u5927\u7684\u5f00\u59cb\uff0c\u4f9d\u6b21\u5b9a\u4f4d\u5176\u4f4d\u7f6e\u3002\u9996\u5148\uff0c\u53ef\u4ee5\u77e5\u9053\u6bcf\u4e00\u5c42\u542b\u67097*8=56\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u7531<code>100 // 56 = 1</code>\u5f97\u5176\u4f4d\u4e8e\u7b2c\u4e8c\u5c42\uff0c \u5bf9\u5e94\u5230\u8be5\u7ef4\u5ea6\u5f97\u5230\u7d22\u5f15\u5c31\u662f1\uff0c\u5373\u8fd4\u56de\u7684<code>array[1]</code>\u3002\u4e4b\u540e\u5728\u7b2c\u4e8c\u5c42\u4e2d\u7ee7\u7eed\u5b9a\u4f4d\uff0c \u53bb\u9664\u7b2c\u4e00\u5c42\u768456\u4e2a\u5143\u7d20\uff0c\u8fd9\u91cc\u8fd8\u5269\u4e0b44\u4e2a\u3002\u53c8\u7531\u4e8e\u5e73\u9762\u4e3a7x8\u7684\uff0c\u6240\u4ee5\u7531<code>44 // 8 = 5</code>\u5f97\u5176\u4f4d\u4e8e\u7b2c6\u884c\uff0c\u5bf9\u5e94\u8be5\u7ef4\u5ea6\u7684\u7d22\u5f15\u662f5\uff0c \u5373\u8fd4\u56de\u7684<code>array[5]</code>, \u6700\u540e\u5269\u4e0b4\u4e2a\u5143\u7d20\u5728\u65b0\u7684\u4e00\u884c\uff0c\u5bf9\u5e94\u7ef4\u5ea6\u7684\u7d22\u5f15\u4e3a3\uff0c \u5373\u8fd4\u56de\u7684<code>array[3]</code>.\u7531\u6b64\u5f97\u5230\u6700\u7ec8\u7684\u7d22\u5f15\u4e3a\uff081\uff0c 5\uff0c 3\uff09</p> In\u00a0[34]: Copied! <pre>unit = np.array([[0, 1], [1, 0]])\nz = np.tile(unit, (4, 4))\nz\n</pre> unit = np.array([[0, 1], [1, 0]]) z = np.tile(unit, (4, 4)) z Out[34]: <pre>array([[0, 1, 0, 1, 0, 1, 0, 1],\n       [1, 0, 1, 0, 1, 0, 1, 0],\n       [0, 1, 0, 1, 0, 1, 0, 1],\n       [1, 0, 1, 0, 1, 0, 1, 0],\n       [0, 1, 0, 1, 0, 1, 0, 1],\n       [1, 0, 1, 0, 1, 0, 1, 0],\n       [0, 1, 0, 1, 0, 1, 0, 1],\n       [1, 0, 1, 0, 1, 0, 1, 0]])</pre> <p><code>tile</code>\u7684\u539f\u610f\u5c31\u662f\u94fa\u74f7\u7816\uff0c\u662f\u5176\u4f5c\u7528\u7684\u4e00\u4e2a\u5f62\u8c61\u7684\u6bd4\u55bb\uff0c\u8fd9\u91cc\u6211\u4eec\u628a8x8\u7684\u68cb\u76d8\u5212\u5206\u4e3a4x4=16\u5757\u201c\u74f7\u7816\u201d\uff08\u8fd9\u91cc\u7684<code>unit</code>\uff09\uff0c \u4e4b\u540e\u5c06\u5176\u5e73\u94fa\u5728\u4e00\u8d77\u5373\u53ef\u3002</p> In\u00a0[35]: Copied! <pre>z = np.random.random((5, 5))\nz = (z - z.mean()) / z.std()\nz\n</pre> z = np.random.random((5, 5)) z = (z - z.mean()) / z.std() z Out[35]: <pre>array([[-1.12827257, -0.50820625, -0.0323797 , -0.49744146,  1.47655254],\n       [-1.86064942,  1.47067894, -1.07098905, -0.06903328,  1.39029289],\n       [-0.25113084, -0.93021344,  1.81900584, -0.85037806, -0.51959092],\n       [-0.83086235,  0.55036267,  1.1242602 , -0.09267453,  0.43763645],\n       [-0.57602888,  1.27352951,  0.11596341, -1.3557155 ,  0.91528381]])</pre> In\u00a0[36]: Copied! <pre>color = np.dtype([(\"r\", np.ubyte, 1),\n                  (\"g\", np.ubyte, 1),\n                  (\"b\", np.ubyte, 1),\n                  (\"a\", np.ubyte, 1)])\ncolor\n</pre> color = np.dtype([(\"r\", np.ubyte, 1),                   (\"g\", np.ubyte, 1),                   (\"b\", np.ubyte, 1),                   (\"a\", np.ubyte, 1)]) color Out[36]: <pre>dtype([('r', 'u1'), ('g', 'u1'), ('b', 'u1'), ('a', 'u1')])</pre> In\u00a0[37]: Copied! <pre>z = np.dot(np.ones((5, 3)), np.ones((3, 2)))\nz\n</pre> z = np.dot(np.ones((5, 3)), np.ones((3, 2))) z Out[37]: <pre>array([[3., 3.],\n       [3., 3.],\n       [3., 3.],\n       [3., 3.],\n       [3., 3.]])</pre> In\u00a0[38]: Copied! <pre># \u4e5f\u53ef\u4ee5\u4f7f\u7528\u64cd\u4f5c\u7b26 @\nz = np.ones((5, 3)) @ np.ones((3, 2))\nz\n</pre> # \u4e5f\u53ef\u4ee5\u4f7f\u7528\u64cd\u4f5c\u7b26 @ z = np.ones((5, 3)) @ np.ones((3, 2)) z Out[38]: <pre>array([[3., 3.],\n       [3., 3.],\n       [3., 3.],\n       [3., 3.],\n       [3., 3.]])</pre> In\u00a0[39]: Copied! <pre>z = np.arange(10)\nz[(z &gt; 3) &amp; (z &lt; 8)] *= -1\nz\n</pre> z = np.arange(10) z[(z &gt; 3) &amp; (z &lt; 8)] *= -1 z Out[39]: <pre>array([ 0,  1,  2,  3, -4, -5, -6, -7,  8,  9])</pre> In\u00a0[40]: Copied! <pre>sum(range(5), -1)\n</pre> sum(range(5), -1) Out[40]: <pre>9</pre> <p>\u8fd9\u91cc\u662f\u4f7f\u7528Python\u5185\u7f6e\u7684<code>sum</code>\u51fd\u6570, \u5b83\u628a\u6240\u6709\u7684\u53c2\u6570\u90fd\u5f53\u4f5c\u6c42\u548c\u7684\u4e00\u90e8\u5206\u76f8\u52a0\uff0c \u8fd9\u91cc\u5c31\u662f\u7b80\u5355\u5730\u5c06\u6240\u6709\u7684\u6570\u5b57\u76f8\u52a0\uff0c10 - 1 = 9</p> In\u00a0[41]: Copied! <pre>np.sum(range(5), -1)\n</pre> np.sum(range(5), -1) Out[41]: <pre>10</pre> <p>\u8fd9\u91cc\u4f7f\u7528\u7684\u662fNumpy\u4e2d\u7684<code>np.sum</code>\uff0c \u8fd9\u91cc\u7684<code>-1</code>\u5e76\u975e\u5f85\u52a0\u7684\u6570\u5b57\uff0c\u800c\u662f\u53e6\u5916\u4e00\u4e2a\u53c2\u6570\u7684\u503c\uff0c\u4ee3\u8868\u591a\u7ef4\u6570\u7ec4\u5728\u6c42\u548c\u65f6\u5404\u4e2a\u8f74\u6c42\u548c\u7684\u987a\u5e8f\u3002\u5177\u4f53\u53ef\u4ee5<code>help(np.sum)</code></p> In\u00a0[42]: Copied! <pre>z = np.arange(10)\nz\n</pre> z = np.arange(10) z Out[42]: <pre>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</pre> In\u00a0[43]: Copied! <pre># 1\nz ** z\n</pre> # 1 z ** z Out[43]: <pre>array([        1,         1,         4,        27,       256,      3125,\n           46656,    823543,  16777216, 387420489])</pre> <p>\u524d\u9762\u63d0\u5230\u8fc7\uff0c \u5bf9\u4e8e\u6570\u7ec4\u4e4b\u95f4\u7684<code>**</code>\u7b49\u7b97\u672f\u8fd0\u7b97\uff0c \u662f\u5143\u7d20\u4e00\u4e00\u5bf9\u5e94\u8fdb\u884c\u8fd0\u7b97\u7684(element-wise), \u5982\u8fd9\u91cc387420489\uff0c\u5c31\u7b49\u4e8e9**9</p> In\u00a0[44]: Copied! <pre># 2\n2 &lt;&lt; z &gt;&gt; 2\n</pre> # 2 2 &lt;&lt; z &gt;&gt; 2 Out[44]: <pre>array([  0,   1,   2,   4,   8,  16,  32,  64, 128, 256])</pre> <p>\u672c\u8d28\u4e0a\u8fdb\u884c\u4e24\u6b21\u79fb\u4f4d\u8fd0\u7b97\uff0c\u4e5f\u5c31\u662f\u7b49\u4e8e<code>(2 &lt;&lt; z) &gt;&gt; 2</code>.\u4e0b\u9762\u5c06\u5176\u62c6\u5f00\u6765\u770b\u3002</p> In\u00a0[45]: Copied! <pre>2 &lt;&lt; z\n</pre> 2 &lt;&lt; z Out[45]: <pre>array([   2,    4,    8,   16,   32,   64,  128,  256,  512, 1024])</pre> <p>\u5c31\u662f\u5c062\u5206\u522b\u5de6\u79fb0\uff0c 1\uff0c 2\uff0c ...\uff0c 9\u4f4d\uff0c\u5f97\u5230\u7684\u5c31\u662f<code>2 &lt;&lt; 0, 2&lt;&lt;1, ..., 2&lt;&lt;9</code>,\u5982\u4e0b\u6240\u793a\uff1a</p> In\u00a0[46]: Copied! <pre>part1 = [2 &lt;&lt; i for i in range(10)]\npart1\n</pre> part1 = [2 &lt;&lt; i for i in range(10)] part1 Out[46]: <pre>[2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]</pre> <p>\u53ef\u4ee5\u770b\u5230\u4e0e<code>2 &lt;&lt; z</code>\u7684\u8f93\u51fa\u662f\u4e00\u81f4\u7684\u3002</p> <p>\u4e4b\u540e\u5c31\u662f\u8fdb\u884c\u53f3\u79fb\u4f4d\u64cd\u4f5c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u8fd9\u91cc\u662f\u5bf9\u4e8e\u6570\u7ec4<code>2 &lt;&lt; z</code>\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c\u53f3\u79fb\u4f4d\uff0c\u5206\u522b\u53f3\u79fb2\u4e2a\u4f4d\u7f6e\u3002\u6bcf\u4e2a\u6570\u503c\u53f3\u79fb2\u4ee3\u8868\u5bf9\u6bcf\u4e2a\u503c<code>x</code>\uff0c\u53d6<code>x // 4</code>, \u5bf9<code>part1</code>\u7ee7\u7eed\u5904\u7406</p> In\u00a0[47]: Copied! <pre>[i // 4 for i in part1]\n</pre> [i // 4 for i in part1] Out[47]: <pre>[0, 1, 2, 4, 8, 16, 32, 64, 128, 256]</pre> <p>\u53ef\u4ee5\u770b\u5230\u5176\u4e0e<code>2 &lt;&lt; z &gt;&gt; 2</code>\u7684\u8f93\u51fa\u662f\u4e00\u81f4\u7684\u3002</p> In\u00a0[48]: Copied! <pre># 3\nz &lt;- z\n</pre> # 3 z &lt;- z Out[48]: <pre>array([False, False, False, False, False, False, False, False, False,\n       False])</pre> <p>\u8fd9\u91cc\u6d89\u53ca\u7684\u4e3b\u8981\u662f\u4f18\u5148\u7ea7\u7684\u95ee\u9898\uff0c\u968f\u4fbf\u627e\u4e2a\u64cd\u4f5c\u7b26\uff0c\u5982<code>&lt;</code>,\u901a\u8fc7<code>help(\"&lt;\")</code>\u5373\u53ef\u67e5\u770b\u6240\u6709\u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u9ed8\u8ba4\u662f\u4ece\u4f4e\u4f18\u5148\u7ea7\u5230\u9ad8\u4f18\u5148\u7ea7\u3002\u53ef\u4ee5\u770b\u5230\uff0c<code>-1</code>\u76f8\u6bd4<code>&lt;</code>\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\uff0c \u6240\u4ee5\u8fd9\u91cc\u5c31\u7b49\u540c\u4e8e<code>z &lt; (-z)</code>\uff0c\u6d4b\u8bd5\u5982\u4e0b</p> In\u00a0[49]: Copied! <pre>z &lt; (-z)\n</pre> z &lt; (-z) Out[49]: <pre>array([False, False, False, False, False, False, False, False, False,\n       False])</pre> In\u00a0[50]: Copied! <pre># 4\n1j * z\n</pre> # 4 1j * z Out[50]: <pre>array([0.+0.j, 0.+1.j, 0.+2.j, 0.+3.j, 0.+4.j, 0.+5.j, 0.+6.j, 0.+7.j,\n       0.+8.j, 0.+9.j])</pre> <p>\u5bf9\u590d\u6570\u7684\u8fd0\u7b97\u7684\u652f\u6301</p> In\u00a0[51]: Copied! <pre># 5\nz/1/1\n</pre> # 5 z/1/1 Out[51]: <pre>array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])</pre> <p>\u4e5f\u5c31\u662f<code>(z/1)/1</code></p> In\u00a0[181]: Copied! <pre># 6\nz &lt; z &gt; z\n</pre> # 6 z &lt; z &gt; z <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-181-856b68e674c4&gt; in &lt;module&gt;\n      1 # 6\n----&gt; 2 z &lt; z &gt; z\n\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()</pre> <p>\u8fd9\u91cc\u53c2\u8003\u4e86\u4e0bPython\u8868\u8fbe\u5f0f\u7684\u6587\u6863,\u548cstackoverflow \u627e\u5230</p> <p>Formally, if <code>a, b, c, \u2026, y, z</code> are expressions and <code>op1, op2, \u2026, opN</code> are comparison operators, then a <code>op1 b op2 c ... y opN z</code> is equivalent to <code>a op1 b and b op2 c and ... y opN z</code>, except that each expression is evaluated at most once.</p> <p>\u5c31\u662f\u8bf4\uff0c\u5728\u4e00\u4e2a\u8868\u8fbe\u5f0f\u91cc\u9762\u8fdb\u884c\u8fde\u7eed\u6bd4\u8f83\u7684\u65f6\u5019\uff0c\u5982<code>x &lt; y &lt;= z</code>,\u9996\u5148\u662f\u7b26\u5408\u8bed\u6cd5\u7684\uff0c\u5176\u7b49\u540c\u4e8e<code>x &lt; y adn y &lt;=z</code>, \u53ea\u4e0d\u8fc7\u5bf9\u4e8e\u91cd\u590d\u7684\u5143\u7d20\uff08\u8fd9\u91cc\u7684<code>y</code>\uff09\u53ea\u4f30\u8ba1\u4e00\u6b21\u3002\u6240\u4ee5\u6211\u4eec\u5728Python\u539f\u751f\u7684<code>list</code>\u4e2d\u8fdb\u884c\u4e0a\u8ff0<code>z</code>\u7684\u8fd0\u7b97\u662f\u53ef\u4ee5\u6b63\u5e38\u8fd4\u56de\u7684\uff0c\u4ee3\u7801\u5982\u4e0b\u3002</p> In\u00a0[53]: Copied! <pre>l1 = [1, 2]\nl1 &lt; l1 &gt; l1\n</pre> l1 = [1, 2] l1 &lt; l1 &gt; l1 Out[53]: <pre>False</pre> In\u00a0[54]: Copied! <pre>(l1 &lt; l1) and (l1 &gt; l1)\n</pre> (l1 &lt; l1) and (l1 &gt; l1) Out[54]: <pre>False</pre> <p>\u56e0\u4e3a<code>l1 &lt; l1</code>\u548c<code>l1 &gt; l1</code>\u5168\u90e8\u662f<code>False</code>,\u6240\u4ee5\u5176<code>and</code>\u4e5f\u662f<code>False</code>.\u4f46\u662f\u5bf9\u4e8e\u6211\u4eec\u7684<code>z</code>\uff0c\u4e5f\u5c31\u662f<code>np.ndarray</code>\u7c7b\u578b\u7684\u6570\u636e\uff0c\u60c5\u51b5\u5c31\u6709\u6240\u4e0d\u540c\u3002</p> <p>\u8fd9\u91cc<code>z &lt; z &gt; z</code>\u4f9d\u65e7\u662f\u4f30\u8ba1\u4e3a<code>z &lt; z and z &gt; z</code>, \u5176\u4e2d<code>z &lt; z</code>\u4e0e<code>z &gt; z</code>\u90fd\u662f\u53ef\u4ee5\u6b63\u5e38\u8fd4\u56de\u7684\uff0c\u4e14\u7ed3\u679c\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a<code>z.size()</code>\u7684<code>array</code>\uff0c \u5143\u7d20\u5168\u90e8\u662f\u5e03\u5c14\u503c\u3002</p> In\u00a0[55]: Copied! <pre>z &lt; z\n</pre> z &lt; z Out[55]: <pre>array([False, False, False, False, False, False, False, False, False,\n       False])</pre> In\u00a0[56]: Copied! <pre>z &gt; z\n</pre> z &gt; z Out[56]: <pre>array([False, False, False, False, False, False, False, False, False,\n       False])</pre> <p>\u4e0d\u53ef\u884c\u7684\u662f\u4e24\u8005\u4e4b\u95f4\u7684<code>and</code>\u3002 \u56e0\u4e3a\u5728\u8fdb\u884c<code>and</code>\u64cd\u4f5c\u65f6\uff0cNumpy\u65e0\u6cd5\u786e\u5207\u5730\u77e5\u9053\u5f62\u5982<code>array([False, False, ...])</code>\u7684\u6570\u7ec4\u5230\u5e95\u662f\u4f30\u8ba1\u4e3a<code>False</code>\uff0c\u8fd8\u662f<code>True</code>\uff0c \u56e0\u4e3a\u8fd9\u91cc\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4\u7684\u5e03\u5c14\u503c\uff1a\u5176\u4e00\u662f<code>\uff41\uff4c\uff4c</code>\uff0c\u5373\u6240\u6709\u7684\u5143\u7d20\u5168\u662f<code>\uff34\uff52\uff55\uff45</code>\u624d\u5224\u5b9a\u4e3a<code>\uff34\uff52\uff55\uff45</code>\uff0c\u5426\u5219\u4e3a<code>\uff26\uff41\uff4c\uff53\uff45</code>\uff1b\u3000\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u662f<code>\uff41\uff4e\uff59</code>\uff0c\u3000\u5373\u53ea\u8981\u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a<code>\uff34\uff52\uff55\uff45</code>\uff0c\u6211\u4eec\u5c31\u5224\u5b9a\u5176\u4e3a<code>\uff34\uff52\uff55\uff45</code>, \u5426\u5219\u5224\u5b9a\u4e3a<code>\uff26\uff41\uff4c\uff53\uff45</code>. \u6b63\u662f\u8fd9\u79cd\u4e0d\u786e\u5b9a\u6027\u4f7f\u5f97Numpy\u62a5\u9519\uff0c\u5e76\u5efa\u8bae\u4f7f\u7528<code>any</code>\u6216\u8005<code>all</code>.</p> In\u00a0[57]: Copied! <pre>np.array(0) / np.array(0)\n</pre> np.array(0) / np.array(0) <pre>/home/shensir/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in true_divide\n  \"\"\"Entry point for launching an IPython kernel.\n</pre> Out[57]: <pre>nan</pre> <p>\u8fd4\u56de<code>nan</code>\u5e76\u5e26\u6709\u8b66\u544a\u8bf4\u5728\u8fdb\u884c\u771f\u9664(true_divide)\u7684\u65f6\u5019\u51fa\u73b0\u95ee\u9898\uff0c\u53730\u505a\u5206\u6bcd\u3002</p> In\u00a0[58]: Copied! <pre>np.array(0) // np.array(0)\n</pre> np.array(0) // np.array(0) <pre>/home/shensir/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in floor_divide\n  \"\"\"Entry point for launching an IPython kernel.\n</pre> Out[58]: <pre>0</pre> <p>\u8fd4\u56de0, \u5e76\u5e26\u6709\u8b66\u544a\u8bf4\u5728\u8fdb\u884c\u5730\u677f\u9664(floor_divide)\u7684\u65f6\u5019\u51fa\u73b0\u95ee\u9898\uff0c\u53730\u505a\u5206\u6bcd\u3002</p> In\u00a0[59]: Copied! <pre>np.array([np.nan]).astype(int).astype(float)\n</pre> np.array([np.nan]).astype(int).astype(float) Out[59]: <pre>array([-9.22337204e+18])</pre> In\u00a0[60]: Copied! <pre>z = np.random.uniform(-10, 10, 10)\nz\n</pre> z = np.random.uniform(-10, 10, 10) z Out[60]: <pre>array([-7.76242024, -5.15644074, -5.19760008,  4.24343511,  3.25711345,\n        4.83702175,  4.92154317, -9.77526978,  0.45551806, -9.95335581])</pre> In\u00a0[61]: Copied! <pre>np.copysign(np.ceil(np.abs(z)), z)\n</pre> np.copysign(np.ceil(np.abs(z)), z) Out[61]: <pre>array([ -8.,  -6.,  -6.,   5.,   4.,   5.,   5., -10.,   1., -10.])</pre> <p>\u6211\u4eec\u9996\u5148\u8003\u8651\u5185\u7f6e\u7684\u51fd\u6570\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u77e5\u9053\u662f\u5426\u6709\u7c7b\u4f3c\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7075\u6d3b\u4f7f\u7528<code>np.lookfor</code>\u6765\u627e\u51fa\u6211\u4eec\u8981\u7684\u51fd\u6570\u3002</p> In\u00a0[63]: Copied! <pre>np.lookfor(\"common values\")\n</pre> np.lookfor(\"common values\") <pre>Search results for 'common values'\n----------------------------------\nnumpy.ma.intersect1d\n    Returns the unique elements common to both arrays.\nnumpy.gcd\n    Returns the greatest common divisor of ``|x1|`` and ``|x2|``\nnumpy.lcm\n    Returns the lowest common multiple of ``|x1|`` and ``|x2|``\nnumpy.intersect1d\n    Find the intersection of two arrays.\nnumpy.ma.common_fill_value\n    Return the common filling value of two masked arrays, if any.\nnumpy.add\n    Add arguments element-wise.\nnumpy.less\n    Return the truth value of (x1 &lt; x2) element-wise.\nnumpy.sign\n    Returns an element-wise indication of the sign of a number.\nnumpy.sqrt\n    Return the non-negative square-root of an array, element-wise.\nnumpy.choose\n    Construct an array from an index array and a set of arrays to choose from.\nnumpy.einsum\n    einsum(subscripts, *operands, out=None, dtype=None, order='K',\nnumpy.nditer\n    Efficient multi-dimensional iterator object to iterate over arrays.\nnumpy.greater\n    Return the truth value of (x1 &gt; x2) element-wise.\nnumpy.nonzero\n    Return the indices of the elements that are non-zero.\nnumpy.less_equal\n    Return the truth value of (x1 =&lt; x2) element-wise.\nnumpy.bitwise_not\n    Compute bit-wise inversion, or bit-wise NOT, element-wise.\nnumpy.histogram2d\n    Compute the bi-dimensional histogram of two data samples.\nnumpy.ma.add\n    Add arguments element-wise.\nnumpy.ma.cov\n    Estimate the covariance matrix.\nnumpy.ma.less\n    Return the truth value of (x1 &lt; x2) element-wise.\nnumpy.ma.sqrt\n    Return the non-negative square-root of an array, element-wise.\nnumpy.greater_equal\n    Return the truth value of (x1 &gt;= x2) element-wise.\nnumpy.linalg.qr\n    Compute the qr factorization of a matrix.\nnumpy.ma.greater\n    Return the truth value of (x1 &gt; x2) element-wise.\nnumpy.ma.nonzero\n    nonzero(self)\nnumpy.ma.less_equal\n    Return the truth value of (x1 =&lt; x2) element-wise.\nnumpy.histogram_bin_edges\n    Function to calculate only the edges of the bins used by the `histogram` function.\nnumpy.ma.greater_equal\n    Return the truth value of (x1 &gt;= x2) element-wise.</pre> <p>\u6211\u4eec\u53d1\u73b0\u8fd4\u56de\u5f97\u5230\u7b2c\u4e00\u4e2a\u51fd\u6570<code>np.intersect1d</code>\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\uff0c\u8fdb\u4e00\u6b65\u67e5\u770b\u5176\u7528\u6cd5\u3002</p> In\u00a0[64]: Copied! <pre>np.info(np.intersect1d)\n</pre> np.info(np.intersect1d) <pre> intersect1d(ar1, ar2, assume_unique=False, return_indices=False)\n\nFind the intersection of two arrays.\n\nReturn the sorted, unique values that are in both of the input arrays.\n\nParameters\n----------\nar1, ar2 : array_like\n    Input arrays. Will be flattened if not already 1D.\nassume_unique : bool\n    If True, the input arrays are both assumed to be unique, which\n    can speed up the calculation.  Default is False.\nreturn_indices : bool\n    If True, the indices which correspond to the intersection of the two\n    arrays are returned. The first instance of a value is used if there are\n    multiple. Default is False.\n\n    .. versionadded:: 1.15.0\n\nReturns\n-------\nintersect1d : ndarray\n    Sorted 1D array of common and unique elements.\ncomm1 : ndarray\n    The indices of the first occurrences of the common values in `ar1`.\n    Only provided if `return_indices` is True.\ncomm2 : ndarray\n    The indices of the first occurrences of the common values in `ar2`.\n    Only provided if `return_indices` is True.\n\n\nSee Also\n--------\nnumpy.lib.arraysetops : Module with a number of other functions for\n                        performing set operations on arrays.\n\nExamples\n--------\n&gt;&gt;&gt; np.intersect1d([1, 3, 4, 3], [3, 1, 2, 1])\narray([1, 3])\n\nTo intersect more than two arrays, use functools.reduce:\n\n&gt;&gt;&gt; from functools import reduce\n&gt;&gt;&gt; reduce(np.intersect1d, ([1, 3, 4, 3], [3, 1, 2, 1], [6, 3, 4, 2]))\narray([3])\n\nTo return the indices of the values common to the input arrays\nalong with the intersected values:\n&gt;&gt;&gt; x = np.array([1, 1, 2, 3, 4])\n&gt;&gt;&gt; y = np.array([2, 1, 4, 6])\n&gt;&gt;&gt; xy, x_ind, y_ind = np.intersect1d(x, y, return_indices=True)\n&gt;&gt;&gt; x_ind, y_ind\n(array([0, 2, 4]), array([1, 0, 2]))\n&gt;&gt;&gt; xy, x[x_ind], y[y_ind]\n(array([1, 2, 4]), array([1, 2, 4]), array([1, 2, 4]))\n</pre> <p>\u6839\u636e\u6587\u6863\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e86\u3002</p> In\u00a0[65]: Copied! <pre>z1 = np.arange(-5, 5)\nz2 = np.arange(10)\nnp.intersect1d(z1, z2)\n</pre> z1 = np.arange(-5, 5) z2 = np.arange(10) np.intersect1d(z1, z2) Out[65]: <pre>array([0, 1, 2, 3, 4])</pre> In\u00a0[66]: Copied! <pre># \u81ea\u6740\u6a21\u5f0f\u542f\u52a8:-)\ndefaults = np.seterr(all=\"ignore\")\nZ = np.ones(1) / 0\n# \u6062\u590d\u7406\u667a\n_ = np.seterr(**defaults)\n</pre> # \u81ea\u6740\u6a21\u5f0f\u542f\u52a8:-) defaults = np.seterr(all=\"ignore\") Z = np.ones(1) / 0 # \u6062\u590d\u7406\u667a _ = np.seterr(**defaults) In\u00a0[67]: Copied! <pre># \u4e5f\u53ef\u4ee5\u5b9a\u4e49\u9519\u8bef\u5904\u7406\u7684\u7ec6\u8282\nwith np.errstate(divide='warn'):\n    Z = np.ones(1) / 0\n</pre> # \u4e5f\u53ef\u4ee5\u5b9a\u4e49\u9519\u8bef\u5904\u7406\u7684\u7ec6\u8282 with np.errstate(divide='warn'):     Z = np.ones(1) / 0 <pre>/home/shensir/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:3: RuntimeWarning: divide by zero encountered in true_divide\n  This is separate from the ipykernel package so we can avoid doing imports until\n</pre> In\u00a0[68]: Copied! <pre>np.sqrt(-1) == np.emath.sqrt(-1)\n</pre> np.sqrt(-1) == np.emath.sqrt(-1) Out[68]: <pre>False</pre> In\u00a0[69]: Copied! <pre>np.sqrt(-1), np.emath.sqrt(-1)\n</pre> np.sqrt(-1), np.emath.sqrt(-1) Out[69]: <pre>(nan, 1j)</pre> In\u00a0[70]: Copied! <pre>yesterday = np.datetime64('today', 'D') - np.timedelta64(1, 'D')\ntoday     = np.datetime64('today', 'D')\ntomorrow  = np.datetime64('today', 'D') + np.timedelta64(1, 'D')\n</pre> yesterday = np.datetime64('today', 'D') - np.timedelta64(1, 'D') today     = np.datetime64('today', 'D') tomorrow  = np.datetime64('today', 'D') + np.timedelta64(1, 'D') In\u00a0[71]: Copied! <pre>yesterday, today, tomorrow\n</pre> yesterday, today, tomorrow Out[71]: <pre>(numpy.datetime64('2019-09-10'),\n numpy.datetime64('2019-09-11'),\n numpy.datetime64('2019-09-12'))</pre> In\u00a0[72]: Copied! <pre>z = np.arange('2016-07', '2016-08', dtype='datetime64[D]')\nz\n</pre> z = np.arange('2016-07', '2016-08', dtype='datetime64[D]') z Out[72]: <pre>array(['2016-07-01', '2016-07-02', '2016-07-03', '2016-07-04',\n       '2016-07-05', '2016-07-06', '2016-07-07', '2016-07-08',\n       '2016-07-09', '2016-07-10', '2016-07-11', '2016-07-12',\n       '2016-07-13', '2016-07-14', '2016-07-15', '2016-07-16',\n       '2016-07-17', '2016-07-18', '2016-07-19', '2016-07-20',\n       '2016-07-21', '2016-07-22', '2016-07-23', '2016-07-24',\n       '2016-07-25', '2016-07-26', '2016-07-27', '2016-07-28',\n       '2016-07-29', '2016-07-30', '2016-07-31'], dtype='datetime64[D]')</pre> In\u00a0[73]: Copied! <pre>A = np.ones(3)*1\nB = np.ones(3)*2\nC = np.ones(3)*3\nnp.add(A,B,out=B)\nnp.divide(A,2,out=A)\nnp.negative(A,out=A)\nnp.multiply(A,B,out=A)\n</pre> A = np.ones(3)*1 B = np.ones(3)*2 C = np.ones(3)*3 np.add(A,B,out=B) np.divide(A,2,out=A) np.negative(A,out=A) np.multiply(A,B,out=A) Out[73]: <pre>array([-1.5, -1.5, -1.5])</pre> In\u00a0[74]: Copied! <pre>z = np.random.uniform(0, 10, 10)\nz\n</pre> z = np.random.uniform(0, 10, 10) z Out[74]: <pre>array([5.07555068, 0.21193302, 4.33521758, 4.46313056, 2.38819989,\n       8.30245732, 7.44764177, 5.86479001, 4.92867853, 4.8735588 ])</pre> In\u00a0[75]: Copied! <pre># 1\nz - z % 1\n</pre> # 1 z - z % 1 Out[75]: <pre>array([5., 0., 4., 4., 2., 8., 7., 5., 4., 4.])</pre> In\u00a0[76]: Copied! <pre># 2\nnp.floor(z)\n</pre> # 2 np.floor(z) Out[76]: <pre>array([5., 0., 4., 4., 2., 8., 7., 5., 4., 4.])</pre> In\u00a0[77]: Copied! <pre># 3\nnp.ceil(z) - 1\n</pre> # 3 np.ceil(z) - 1 Out[77]: <pre>array([5., 0., 4., 4., 2., 8., 7., 5., 4., 4.])</pre> In\u00a0[78]: Copied! <pre># 4\nz.astype(int)\n</pre> # 4 z.astype(int) Out[78]: <pre>array([5, 0, 4, 4, 2, 8, 7, 5, 4, 4])</pre> In\u00a0[79]: Copied! <pre># 5\nnp.trunc(z)\n</pre> # 5 np.trunc(z) Out[79]: <pre>array([5., 0., 4., 4., 2., 8., 7., 5., 4., 4.])</pre> In\u00a0[80]: Copied! <pre># 1,\u7b54\u6848\u7684\u65b9\u6cd5\nz = np.zeros((5, 5))\nz += np.arange(5)\nz\n</pre> # 1,\u7b54\u6848\u7684\u65b9\u6cd5 z = np.zeros((5, 5)) z += np.arange(5) z Out[80]: <pre>array([[0., 1., 2., 3., 4.],\n       [0., 1., 2., 3., 4.],\n       [0., 1., 2., 3., 4.],\n       [0., 1., 2., 3., 4.],\n       [0., 1., 2., 3., 4.]])</pre> In\u00a0[81]: Copied! <pre># 2,\u5229\u7528tile\nz = np.tile(np.arange(5), (5, 1))\nz\n</pre> # 2,\u5229\u7528tile z = np.tile(np.arange(5), (5, 1)) z Out[81]: <pre>array([[0, 1, 2, 3, 4],\n       [0, 1, 2, 3, 4],\n       [0, 1, 2, 3, 4],\n       [0, 1, 2, 3, 4],\n       [0, 1, 2, 3, 4]])</pre> In\u00a0[82]: Copied! <pre># 1, \u7b54\u6848\u7684\u65b9\u6cd5\ndef gen():\n    for i in range(10):\n        yield i\n        \nz = np.fromiter(gen(), dtype=float, count=-1)\nz\n</pre> # 1, \u7b54\u6848\u7684\u65b9\u6cd5 def gen():     for i in range(10):         yield i          z = np.fromiter(gen(), dtype=float, count=-1) z Out[82]: <pre>array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])</pre> In\u00a0[83]: Copied! <pre># 2, \u5217\u8868\u89e3\u6790\nz = np.array([i for i in gen()])\nz\n</pre> # 2, \u5217\u8868\u89e3\u6790 z = np.array([i for i in gen()]) z Out[83]: <pre>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</pre> In\u00a0[84]: Copied! <pre>z = np.linspace(0, 1, 11, endpoint=False)[1:]\nz\n</pre> z = np.linspace(0, 1, 11, endpoint=False)[1:] z Out[84]: <pre>array([0.09090909, 0.18181818, 0.27272727, 0.36363636, 0.45454545,\n       0.54545455, 0.63636364, 0.72727273, 0.81818182, 0.90909091])</pre> In\u00a0[85]: Copied! <pre>z = np.random.random(10)\nz\n</pre> z = np.random.random(10) z Out[85]: <pre>array([0.2667407 , 0.6050111 , 0.75354372, 0.27058423, 0.52230328,\n       0.09832853, 0.71363667, 0.88404059, 0.56705442, 0.99448158])</pre> In\u00a0[86]: Copied! <pre>z.sort()\nz\n</pre> z.sort() z Out[86]: <pre>array([0.09832853, 0.2667407 , 0.27058423, 0.52230328, 0.56705442,\n       0.6050111 , 0.71363667, 0.75354372, 0.88404059, 0.99448158])</pre> In\u00a0[87]: Copied! <pre>z = np.arange(10)\nnp.add.reduce(z)\n</pre> z = np.arange(10) np.add.reduce(z) Out[87]: <pre>45</pre> In\u00a0[88]: Copied! <pre>%timeit np.add.reduce(z)\n</pre> %timeit np.add.reduce(z) <pre>1.52 \u00b5s \u00b1 26.7 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n</pre> In\u00a0[89]: Copied! <pre>%timeit np.sum(z)\n</pre> %timeit np.sum(z) <pre>3.94 \u00b5s \u00b1 299 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n</pre> <p>\u53ef\u4ee5\u770b\u5230<code>np.add.reduce</code>\u6b64\u65f6\u5dee\u4e0d\u591a\u5feb\u4e0a\u4e00\u500d</p> In\u00a0[90]: Copied! <pre>A = np.random.randint(0,2,5)\nB = np.random.randint(0,2,5)\n</pre> A = np.random.randint(0,2,5) B = np.random.randint(0,2,5) In\u00a0[91]: Copied! <pre># 1\uff0c \u5df2\u77e5A\uff0cB\u7684shape\u76f8\u7b49\n# \u5b58\u5728\u5bb9\u9519\uff0c\u9002\u7528\u4e8e\u6d6e\u70b9\u6570\u7684\u6bd4\u8f83\nnp.allclose(A, B)\n</pre> # 1\uff0c \u5df2\u77e5A\uff0cB\u7684shape\u76f8\u7b49 # \u5b58\u5728\u5bb9\u9519\uff0c\u9002\u7528\u4e8e\u6d6e\u70b9\u6570\u7684\u6bd4\u8f83 np.allclose(A, B) Out[91]: <pre>False</pre> In\u00a0[92]: Copied! <pre># 2. \u540c\u65f6\u68c0\u67e5shape\u4e0e\u6570\u503c\n# \u8981\u6c42\u6570\u503c\u5b8c\u5168\u76f8\u7b49\nnp.array_equal(A, B)\n</pre> # 2. \u540c\u65f6\u68c0\u67e5shape\u4e0e\u6570\u503c # \u8981\u6c42\u6570\u503c\u5b8c\u5168\u76f8\u7b49 np.array_equal(A, B) Out[92]: <pre>False</pre> In\u00a0[93]: Copied! <pre>z = np.zeros(10)\nz.flags\n</pre> z = np.zeros(10) z.flags Out[93]: <pre>  C_CONTIGUOUS : True\n  F_CONTIGUOUS : True\n  OWNDATA : True\n  WRITEABLE : True\n  ALIGNED : True\n  WRITEBACKIFCOPY : False\n  UPDATEIFCOPY : False</pre> In\u00a0[94]: Copied! <pre>z.flags.writeable = False\nz.flags\n</pre> z.flags.writeable = False z.flags Out[94]: <pre>  C_CONTIGUOUS : True\n  F_CONTIGUOUS : True\n  OWNDATA : True\n  WRITEABLE : False\n  ALIGNED : True\n  WRITEBACKIFCOPY : False\n  UPDATEIFCOPY : False</pre> In\u00a0[95]: Copied! <pre>z[0] = 1\n</pre> z[0] = 1 <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-95-ba34f733b6cb&gt; in &lt;module&gt;\n----&gt; 1 z[0] = 1\n\nValueError: assignment destination is read-only</pre> In\u00a0[96]: Copied! <pre>z = np.random.random((10, 2))\nx, y = z[:, 0], z[:, 1]\nr = np.sqrt(x**2 + y**2)\ntheta = np.arctan2(y, x)\nr, theta\n</pre> z = np.random.random((10, 2)) x, y = z[:, 0], z[:, 1] r = np.sqrt(x**2 + y**2) theta = np.arctan2(y, x) r, theta Out[96]: <pre>(array([1.0191402 , 0.3789241 , 1.01760735, 0.28642266, 1.09696314,\n        0.35963712, 0.86915363, 0.91189768, 1.18794229, 0.97413596]),\n array([1.08779371, 0.93177059, 0.79171987, 1.50554416, 1.01316742,\n        0.34043887, 0.93478081, 1.23714664, 0.70362634, 1.29930594]))</pre> In\u00a0[97]: Copied! <pre>z = np.random.random(10)\nz\n</pre> z = np.random.random(10) z Out[97]: <pre>array([0.93864246, 0.74504455, 0.91073504, 0.23722471, 0.49496735,\n       0.80987834, 0.95456578, 0.63748325, 0.91084975, 0.69213675])</pre> In\u00a0[98]: Copied! <pre>z[z.argmax()] = 0\nz\n</pre> z[z.argmax()] = 0 z Out[98]: <pre>array([0.93864246, 0.74504455, 0.91073504, 0.23722471, 0.49496735,\n       0.80987834, 0.        , 0.63748325, 0.91084975, 0.69213675])</pre> In\u00a0[99]: Copied! <pre>z = np.zeros((5, 5), [('x', float), ('y', float)])\nz = np.meshgrid(np.linspace(0, 1, 5),\n                np.linspace(0, 1, 5))\nz\n</pre> z = np.zeros((5, 5), [('x', float), ('y', float)]) z = np.meshgrid(np.linspace(0, 1, 5),                 np.linspace(0, 1, 5)) z Out[99]: <pre>[array([[0.  , 0.25, 0.5 , 0.75, 1.  ],\n        [0.  , 0.25, 0.5 , 0.75, 1.  ],\n        [0.  , 0.25, 0.5 , 0.75, 1.  ],\n        [0.  , 0.25, 0.5 , 0.75, 1.  ],\n        [0.  , 0.25, 0.5 , 0.75, 1.  ]]),\n array([[0.  , 0.  , 0.  , 0.  , 0.  ],\n        [0.25, 0.25, 0.25, 0.25, 0.25],\n        [0.5 , 0.5 , 0.5 , 0.5 , 0.5 ],\n        [0.75, 0.75, 0.75, 0.75, 0.75],\n        [1.  , 1.  , 1.  , 1.  , 1.  ]])]</pre> In\u00a0[100]: Copied! <pre>x = np.arange(8)\ny = x + 0.5\nC = np.subtract.outer(x, y)\nC\n</pre> x = np.arange(8) y = x + 0.5 C = np.subtract.outer(x, y) C Out[100]: <pre>array([[-0.5, -1.5, -2.5, -3.5, -4.5, -5.5, -6.5, -7.5],\n       [ 0.5, -0.5, -1.5, -2.5, -3.5, -4.5, -5.5, -6.5],\n       [ 1.5,  0.5, -0.5, -1.5, -2.5, -3.5, -4.5, -5.5],\n       [ 2.5,  1.5,  0.5, -0.5, -1.5, -2.5, -3.5, -4.5],\n       [ 3.5,  2.5,  1.5,  0.5, -0.5, -1.5, -2.5, -3.5],\n       [ 4.5,  3.5,  2.5,  1.5,  0.5, -0.5, -1.5, -2.5],\n       [ 5.5,  4.5,  3.5,  2.5,  1.5,  0.5, -0.5, -1.5],\n       [ 6.5,  5.5,  4.5,  3.5,  2.5,  1.5,  0.5, -0.5]])</pre> In\u00a0[101]: Copied! <pre>np.linalg.det(C)\n</pre> np.linalg.det(C) Out[101]: <pre>1.8457040860738383e-92</pre> <p>\u5176\u5b9e\u8fd9\u91cc<code>np.subtract.outer</code>\u5c31\u7b49\u4e8e\u8fdb\u884c\u4e86broadcast,\u6211\u4eec\u4e5f\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5199\u3002</p> In\u00a0[102]: Copied! <pre>C_test = x.reshape(8, 1)- y.reshape(1, 8)\nC_test\n</pre> C_test = x.reshape(8, 1)- y.reshape(1, 8) C_test Out[102]: <pre>array([[-0.5, -1.5, -2.5, -3.5, -4.5, -5.5, -6.5, -7.5],\n       [ 0.5, -0.5, -1.5, -2.5, -3.5, -4.5, -5.5, -6.5],\n       [ 1.5,  0.5, -0.5, -1.5, -2.5, -3.5, -4.5, -5.5],\n       [ 2.5,  1.5,  0.5, -0.5, -1.5, -2.5, -3.5, -4.5],\n       [ 3.5,  2.5,  1.5,  0.5, -0.5, -1.5, -2.5, -3.5],\n       [ 4.5,  3.5,  2.5,  1.5,  0.5, -0.5, -1.5, -2.5],\n       [ 5.5,  4.5,  3.5,  2.5,  1.5,  0.5, -0.5, -1.5],\n       [ 6.5,  5.5,  4.5,  3.5,  2.5,  1.5,  0.5, -0.5]])</pre> In\u00a0[103]: Copied! <pre>np.linalg.det(C_test)\n</pre> np.linalg.det(C_test) Out[103]: <pre>1.8457040860738383e-92</pre> In\u00a0[104]: Copied! <pre># \u6d4b\u8bd5\u4e24\u79cd\u65b9\u6cd5\u8fd4\u56de\u7684C\u662f\u5426\u76f8\u540c\nnp.array_equal(C, C_test)\n</pre> # \u6d4b\u8bd5\u4e24\u79cd\u65b9\u6cd5\u8fd4\u56de\u7684C\u662f\u5426\u76f8\u540c np.array_equal(C, C_test) Out[104]: <pre>True</pre> In\u00a0[105]: Copied! <pre>for dtype in [np.int8, np.int16, np.int32, np.int64]:\n    info = np.iinfo(dtype)\n    print(f\"{dtype}: min={info.min}, max={info.max}\")\nfor dtype in [np.float16, np.float32, np.float64, np.float128]:\n    info = np.finfo(dtype)\n    print(f\"{dtype}: min={info.min}, max={info.max}\")\n</pre> for dtype in [np.int8, np.int16, np.int32, np.int64]:     info = np.iinfo(dtype)     print(f\"{dtype}: min={info.min}, max={info.max}\") for dtype in [np.float16, np.float32, np.float64, np.float128]:     info = np.finfo(dtype)     print(f\"{dtype}: min={info.min}, max={info.max}\") <pre>&lt;class 'numpy.int8'&gt;: min=-128, max=127\n&lt;class 'numpy.int16'&gt;: min=-32768, max=32767\n&lt;class 'numpy.int32'&gt;: min=-2147483648, max=2147483647\n&lt;class 'numpy.int64'&gt;: min=-9223372036854775808, max=9223372036854775807\n&lt;class 'numpy.float16'&gt;: min=-65504.0, max=65504.0\n&lt;class 'numpy.float32'&gt;: min=-3.4028234663852886e+38, max=3.4028234663852886e+38\n&lt;class 'numpy.float64'&gt;: min=-1.7976931348623157e+308, max=1.7976931348623157e+308\n&lt;class 'numpy.float128'&gt;: min=-inf, max=inf\n</pre> In\u00a0[106]: Copied! <pre>with np.printoptions(threshold=np.inf):\n    z = np.ones((10, 10))\n    print(z)\n</pre> with np.printoptions(threshold=np.inf):     z = np.ones((10, 10))     print(z) <pre>[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]\n</pre> In\u00a0[107]: Copied! <pre># \u7ed9\u5b9a\u7684\u6570\u7ec4\nz = np.random.uniform(0, 1, 10)\nz\n</pre> # \u7ed9\u5b9a\u7684\u6570\u7ec4 z = np.random.uniform(0, 1, 10) z Out[107]: <pre>array([0.04294299, 0.8335869 , 0.36994852, 0.936557  , 0.48305288,\n       0.12533161, 0.96445418, 0.01702583, 0.67657077, 0.14043997])</pre> In\u00a0[108]: Copied! <pre># \u7ed9\u5b9a\u7684\u6570\nx = 0.5\n# \u5b9a\u4f4d\u8ddd\u79bb\u6700\u8fd1\u6570\u7684\u4f4d\u7f6e\nindex = np.abs(z - x).argmin()\n# \u627e\u5230\u8be5\u6570\u5b57\nz[index]\n</pre> # \u7ed9\u5b9a\u7684\u6570 x = 0.5 # \u5b9a\u4f4d\u8ddd\u79bb\u6700\u8fd1\u6570\u7684\u4f4d\u7f6e index = np.abs(z - x).argmin() # \u627e\u5230\u8be5\u6570\u5b57 z[index] Out[108]: <pre>0.48305287517652307</pre> In\u00a0[109]: Copied! <pre>z = np.zeros(10, [('position', [('x', float, 1),\n                               ('y', float, 1)]),\n                 ('color', [('r', float, 1),\n                            ('g', float, 1),\n                            ('b', float, 1)])\n                 ]\n            )\nz\n</pre> z = np.zeros(10, [('position', [('x', float, 1),                                ('y', float, 1)]),                  ('color', [('r', float, 1),                             ('g', float, 1),                             ('b', float, 1)])                  ]             ) z Out[109]: <pre>array([((0., 0.), (0., 0., 0.)), ((0., 0.), (0., 0., 0.)),\n       ((0., 0.), (0., 0., 0.)), ((0., 0.), (0., 0., 0.)),\n       ((0., 0.), (0., 0., 0.)), ((0., 0.), (0., 0., 0.)),\n       ((0., 0.), (0., 0., 0.)), ((0., 0.), (0., 0., 0.)),\n       ((0., 0.), (0., 0., 0.)), ((0., 0.), (0., 0., 0.))],\n      dtype=[('position', [('x', '&lt;f8'), ('y', '&lt;f8')]), ('color', [('r', '&lt;f8'), ('g', '&lt;f8'), ('b', '&lt;f8')])])</pre> In\u00a0[110]: Copied! <pre>z = np.random.random((10, 2))\nx, y = np.atleast_2d(z[:, 0], z[:, 1])\nd = np.sqrt((x - x.T)**2 + (y - y.T)**2)\nd\n</pre> z = np.random.random((10, 2)) x, y = np.atleast_2d(z[:, 0], z[:, 1]) d = np.sqrt((x - x.T)**2 + (y - y.T)**2) d Out[110]: <pre>array([[0.        , 0.82757935, 0.64681519, 0.43368238, 0.85165766,\n        0.57613768, 0.48566732, 0.44501945, 0.90701745, 0.55962651],\n       [0.82757935, 0.        , 0.3477681 , 0.96918723, 0.67596378,\n        0.71128017, 0.37897508, 0.43258791, 0.50371629, 0.26882844],\n       [0.64681519, 0.3477681 , 0.        , 0.65720606, 0.37061334,\n        0.36563979, 0.18181895, 0.43879256, 0.29206274, 0.27712044],\n       [0.43368238, 0.96918723, 0.65720606, 0.        , 0.64632996,\n        0.35301865, 0.59527913, 0.73887741, 0.80043261, 0.74933684],\n       [0.85165766, 0.67596378, 0.37061334, 0.64632996, 0.        ,\n        0.30214225, 0.51433777, 0.78889208, 0.22248961, 0.6454205 ],\n       [0.57613768, 0.71128017, 0.36563979, 0.35301865, 0.30214225,\n        0.        , 0.39640111, 0.64228203, 0.44903039, 0.56316235],\n       [0.48566732, 0.37897508, 0.18181895, 0.59527913, 0.51433777,\n        0.39640111, 0.        , 0.274627  , 0.47255738, 0.1680208 ],\n       [0.44501945, 0.43258791, 0.43879256, 0.73887741, 0.78889208,\n        0.64228203, 0.274627  , 0.        , 0.72766324, 0.18906137],\n       [0.90701745, 0.50371629, 0.29206274, 0.80043261, 0.22248961,\n        0.44903039, 0.47255738, 0.72766324, 0.        , 0.55335753],\n       [0.55962651, 0.26882844, 0.27712044, 0.74933684, 0.6454205 ,\n        0.56316235, 0.1680208 , 0.18906137, 0.55335753, 0.        ]])</pre> <p>\u8fd9\u91cc\u4f7f\u7528<code>np.atleast_2d</code>\u4f7f\u5f97\u6211\u4eec\u5f97\u5230\u7684<code>x</code>\uff0c <code>y</code>\u76f4\u63a5\u5c31\u662f2\u7ef4\u7684\u6570\u7ec4\uff0c\u65b9\u4fbf\u4e86\u6211\u4eec\u540e\u9762\u76f4\u63a5\u4f7f\u7528<code>broadcasting</code>.\u6211\u4eec\u4e5f\u53ef\u4ee5\u91c7\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u4ee3\u66ff\u8fd9\u884c\uff0c\u4f46\u662f\u4e0d\u591f\u7b80\u6d01\uff1a</p> <pre>x = z[:, 0].reshape(10, 1)\ny = z[:, 1].reshape(1, 10)\n</pre> <p>\u6b64\u5916\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528<code>scipy</code>\u5185\u7f6e\u7684\u51fd\u6570\uff0c\u5176\u6548\u7387\u8981\u9ad8\u4e00\u4e9b\u3002</p> In\u00a0[111]: Copied! <pre>import scipy\nimport scipy.spatial\n\nd = scipy.spatial.distance.cdist(z, z)\nd\n</pre> import scipy import scipy.spatial  d = scipy.spatial.distance.cdist(z, z) d Out[111]: <pre>array([[0.        , 0.82757935, 0.64681519, 0.43368238, 0.85165766,\n        0.57613768, 0.48566732, 0.44501945, 0.90701745, 0.55962651],\n       [0.82757935, 0.        , 0.3477681 , 0.96918723, 0.67596378,\n        0.71128017, 0.37897508, 0.43258791, 0.50371629, 0.26882844],\n       [0.64681519, 0.3477681 , 0.        , 0.65720606, 0.37061334,\n        0.36563979, 0.18181895, 0.43879256, 0.29206274, 0.27712044],\n       [0.43368238, 0.96918723, 0.65720606, 0.        , 0.64632996,\n        0.35301865, 0.59527913, 0.73887741, 0.80043261, 0.74933684],\n       [0.85165766, 0.67596378, 0.37061334, 0.64632996, 0.        ,\n        0.30214225, 0.51433777, 0.78889208, 0.22248961, 0.6454205 ],\n       [0.57613768, 0.71128017, 0.36563979, 0.35301865, 0.30214225,\n        0.        , 0.39640111, 0.64228203, 0.44903039, 0.56316235],\n       [0.48566732, 0.37897508, 0.18181895, 0.59527913, 0.51433777,\n        0.39640111, 0.        , 0.274627  , 0.47255738, 0.1680208 ],\n       [0.44501945, 0.43258791, 0.43879256, 0.73887741, 0.78889208,\n        0.64228203, 0.274627  , 0.        , 0.72766324, 0.18906137],\n       [0.90701745, 0.50371629, 0.29206274, 0.80043261, 0.22248961,\n        0.44903039, 0.47255738, 0.72766324, 0.        , 0.55335753],\n       [0.55962651, 0.26882844, 0.27712044, 0.74933684, 0.6454205 ,\n        0.56316235, 0.1680208 , 0.18906137, 0.55335753, 0.        ]])</pre> In\u00a0[112]: Copied! <pre>z = np.zeros(10, dtype=np.float32)\nz\n</pre> z = np.zeros(10, dtype=np.float32) z Out[112]: <pre>array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)</pre> In\u00a0[113]: Copied! <pre>z = z.astype(np.int32, copy=False)\nz\n</pre> z = z.astype(np.int32, copy=False) z Out[113]: <pre>array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)</pre> In\u00a0[114]: Copied! <pre>from io import StringIO\n# \u201c\u5047\u201d\u7684\u6587\u4ef6\ns = StringIO(\"\"\"1, 2, 3, 4, 5\\n\n                6,  ,  , 7, 8\\n\n                 ,  , 9,10,11\\n\"\"\")\nz = np.genfromtxt(s, delimiter=\",\", missing_values=' ')\nz\n</pre> from io import StringIO # \u201c\u5047\u201d\u7684\u6587\u4ef6 s = StringIO(\"\"\"1, 2, 3, 4, 5\\n                 6,  ,  , 7, 8\\n                  ,  , 9,10,11\\n\"\"\") z = np.genfromtxt(s, delimiter=\",\", missing_values=' ') z Out[114]: <pre>array([[ 1.,  2.,  3.,  4.,  5.],\n       [ 6., nan, nan,  7.,  8.],\n       [nan, nan,  9., 10., 11.]])</pre> In\u00a0[115]: Copied! <pre>Z = np.arange(9).reshape(3,3)\nfor index, value in np.ndenumerate(Z):\n    print(index, value)\n</pre> Z = np.arange(9).reshape(3,3) for index, value in np.ndenumerate(Z):     print(index, value) <pre>(0, 0) 0\n(0, 1) 1\n(0, 2) 2\n(1, 0) 3\n(1, 1) 4\n(1, 2) 5\n(2, 0) 6\n(2, 1) 7\n(2, 2) 8\n</pre> In\u00a0[116]: Copied! <pre>for index in np.ndindex(Z.shape):\n    print(index, Z[index])\n</pre> for index in np.ndindex(Z.shape):     print(index, Z[index]) <pre>(0, 0) 0\n(0, 1) 1\n(0, 2) 2\n(1, 0) 3\n(1, 1) 4\n(1, 2) 5\n(2, 0) 6\n(2, 1) 7\n(2, 2) 8\n</pre> In\u00a0[117]: Copied! <pre>X, Y = np.meshgrid(np.linspace(-1,1,10), np.linspace(-1,1,10))\nD = np.sqrt(X*X+Y*Y)\nsigma, mu = 1.0, 0.0\nG = np.exp(-( (D-mu)**2 / ( 2.0 * sigma**2 ) ) )\nG\n</pre> X, Y = np.meshgrid(np.linspace(-1,1,10), np.linspace(-1,1,10)) D = np.sqrt(X*X+Y*Y) sigma, mu = 1.0, 0.0 G = np.exp(-( (D-mu)**2 / ( 2.0 * sigma**2 ) ) ) G Out[117]: <pre>array([[0.36787944, 0.44822088, 0.51979489, 0.57375342, 0.60279818,\n        0.60279818, 0.57375342, 0.51979489, 0.44822088, 0.36787944],\n       [0.44822088, 0.54610814, 0.63331324, 0.69905581, 0.73444367,\n        0.73444367, 0.69905581, 0.63331324, 0.54610814, 0.44822088],\n       [0.51979489, 0.63331324, 0.73444367, 0.81068432, 0.85172308,\n        0.85172308, 0.81068432, 0.73444367, 0.63331324, 0.51979489],\n       [0.57375342, 0.69905581, 0.81068432, 0.89483932, 0.9401382 ,\n        0.9401382 , 0.89483932, 0.81068432, 0.69905581, 0.57375342],\n       [0.60279818, 0.73444367, 0.85172308, 0.9401382 , 0.98773022,\n        0.98773022, 0.9401382 , 0.85172308, 0.73444367, 0.60279818],\n       [0.60279818, 0.73444367, 0.85172308, 0.9401382 , 0.98773022,\n        0.98773022, 0.9401382 , 0.85172308, 0.73444367, 0.60279818],\n       [0.57375342, 0.69905581, 0.81068432, 0.89483932, 0.9401382 ,\n        0.9401382 , 0.89483932, 0.81068432, 0.69905581, 0.57375342],\n       [0.51979489, 0.63331324, 0.73444367, 0.81068432, 0.85172308,\n        0.85172308, 0.81068432, 0.73444367, 0.63331324, 0.51979489],\n       [0.44822088, 0.54610814, 0.63331324, 0.69905581, 0.73444367,\n        0.73444367, 0.69905581, 0.63331324, 0.54610814, 0.44822088],\n       [0.36787944, 0.44822088, 0.51979489, 0.57375342, 0.60279818,\n        0.60279818, 0.57375342, 0.51979489, 0.44822088, 0.36787944]])</pre> In\u00a0[118]: Copied! <pre>n = 5\np = 3\nz = np.zeros((n, n))\nnp.put(z, np.random.choice(range(n*n), p), 1)\nz\n</pre> n = 5 p = 3 z = np.zeros((n, n)) np.put(z, np.random.choice(range(n*n), p), 1) z Out[118]: <pre>array([[0., 0., 0., 0., 0.],\n       [1., 0., 1., 0., 1.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.]])</pre> In\u00a0[119]: Copied! <pre># 1, \u7b54\u6848\u7684\u65b9\u6cd5\nz = np.arange(10).reshape(2, 5)\nz\n</pre> # 1, \u7b54\u6848\u7684\u65b9\u6cd5 z = np.arange(10).reshape(2, 5) z Out[119]: <pre>array([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])</pre> In\u00a0[120]: Copied! <pre>z_new = z - z.mean(axis=1, keepdims=True)\nz_new\n</pre> z_new = z - z.mean(axis=1, keepdims=True) z_new Out[120]: <pre>array([[-2., -1.,  0.,  1.,  2.],\n       [-2., -1.,  0.,  1.,  2.]])</pre> <p>\u6ce8\u610f\u8fd9\u91cc\uff0c\u8bbe\u7f6e<code>keepdims</code>\u53ef\u4ee5\u65b9\u4fbf\u8fdb\u884c<code>broadcasting</code>, \u514d\u53bb\u624b\u52a8<code>reshape</code>\u7684\u6d41\u7a0b\u3002</p> <p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u8003\u8651\u5bf9\u77e9\u9635\u6bcf\u4e00\u884c\u5e94\u7528\u4e00\u4e2a\u4e2d\u5fc3\u5316\u7684\u51fd\u6570\u6765\u5b8c\u6210\u4efb\u52a1\u3002</p> In\u00a0[121]: Copied! <pre># 2, apply\u65b9\u6cd5\ndef centered(xs):\n    return xs - xs.mean()\n\nz_new = np.apply_along_axis(centered, 1, z)\nz_new\n</pre> # 2, apply\u65b9\u6cd5 def centered(xs):     return xs - xs.mean()  z_new = np.apply_along_axis(centered, 1, z) z_new Out[121]: <pre>array([[-2., -1.,  0.,  1.,  2.],\n       [-2., -1.,  0.,  1.,  2.]])</pre> In\u00a0[122]: Copied! <pre>z = np.random.randint(0, 10, (3, 3))\nz\n</pre> z = np.random.randint(0, 10, (3, 3)) z Out[122]: <pre>array([[9, 0, 7],\n       [8, 4, 6],\n       [5, 7, 5]])</pre> In\u00a0[123]: Copied! <pre># \u6839\u636e\u7b2c\u4e8c\u5217\u987a\u5e8f\u6392\u5217\nz[z[:, 1].argsort(), ]\n</pre> # \u6839\u636e\u7b2c\u4e8c\u5217\u987a\u5e8f\u6392\u5217 z[z[:, 1].argsort(), ] Out[123]: <pre>array([[9, 0, 7],\n       [8, 4, 6],\n       [5, 7, 5]])</pre> In\u00a0[124]: Copied! <pre>z = np.random.randint(0, 3, (3, 10))\nz\n</pre> z = np.random.randint(0, 3, (3, 10)) z Out[124]: <pre>array([[1, 2, 2, 1, 2, 0, 0, 1, 2, 2],\n       [2, 0, 2, 2, 2, 1, 2, 0, 0, 0],\n       [0, 1, 0, 1, 1, 2, 1, 0, 0, 2]])</pre> In\u00a0[125]: Copied! <pre>print((~z.any(axis=0)).any())\n</pre> print((~z.any(axis=0)).any()) <pre>False\n</pre> <p>\u4e00\u65e6\u6709\u7a7a\u5217\u7684\u65f6\u5019\uff0c <code>z.any(axis=0)</code>\u8fd4\u56de<code>False</code>\uff0c \u5373<code>~z.any(axis=0)</code>\u8fd4\u56de<code>True</code>\uff0c \u4e4b\u540e\u518d\u5e94\u7528<code>any</code>, \u5219\u6bd4\u8fd4\u56de<code>True</code>\u3002 \u53cd\u4e4b\uff0c\u82e5\u65e0\u4efb\u4f55\u7a7a\u5217\uff0c<code>~z.any(axis=0)</code>\u5168\u90e8\u8fd4\u56de<code>False</code>\uff0c \u5e94\u7528<code>any</code>\uff0c\u4f9d\u65e7\u8fd4\u56de<code>False</code>\u3002</p> In\u00a0[126]: Copied! <pre>A = np.arange(3).reshape(3,1)\nB = np.arange(3).reshape(1,3)\nit = np.nditer([A,B,None])\nfor x,y,z in it: z[...] = x + y\nprint(it.operands[2])\n</pre> A = np.arange(3).reshape(3,1) B = np.arange(3).reshape(1,3) it = np.nditer([A,B,None]) for x,y,z in it: z[...] = x + y print(it.operands[2]) <pre>[[0 1 2]\n [1 2 3]\n [2 3 4]]\n</pre> In\u00a0[127]: Copied! <pre>class NamedArray(np.ndarray):\n    def __new__(cls, array, name=\"no name\"):\n        obj = np.asarray(array).view(cls)\n        obj.name = name\n        return obj\n    def __array_finalize__(self, obj):\n        if obj is None: return\n        self.info = getattr(obj, 'name', \"no name\")\n\nZ = NamedArray(np.arange(10), \"range_10\")\nprint (Z.name)\n</pre> class NamedArray(np.ndarray):     def __new__(cls, array, name=\"no name\"):         obj = np.asarray(array).view(cls)         obj.name = name         return obj     def __array_finalize__(self, obj):         if obj is None: return         self.info = getattr(obj, 'name', \"no name\")  Z = NamedArray(np.arange(10), \"range_10\") print (Z.name) <pre>range_10\n</pre> In\u00a0[128]: Copied! <pre># Author: Brett Olsen\nZ = np.ones(10)\nI = np.random.randint(0,len(Z),20)\n\nZ_new = Z + np.bincount(I, minlength=len(Z))\nZ_new\n</pre> # Author: Brett Olsen Z = np.ones(10) I = np.random.randint(0,len(Z),20)  Z_new = Z + np.bincount(I, minlength=len(Z)) Z_new Out[128]: <pre>array([2., 2., 6., 5., 2., 3., 3., 3., 3., 1.])</pre> In\u00a0[129]: Copied! <pre># Another solution\n# Author: Bartosz Telenczuk\nnp.add.at(Z, I, 1)\nZ\n</pre> # Another solution # Author: Bartosz Telenczuk np.add.at(Z, I, 1) Z Out[129]: <pre>array([2., 2., 6., 5., 2., 3., 3., 3., 3., 1.])</pre> In\u00a0[130]: Copied! <pre>X = [1,2,3,4,5,6]\nI = [1,3,9,3,4,1]\nF = np.bincount(I,X)\nprint(F)\n</pre> X = [1,2,3,4,5,6] I = [1,3,9,3,4,1] F = np.bincount(I,X) print(F) <pre>[0. 7. 0. 6. 5. 0. 0. 0. 0. 3.]\n</pre> <p>\u8fd9\u91cc<code>bincount</code>\u7684\u7528\u6cd5\u6709\u70b9\u7ed5...\u8ba9\u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\u5148:-)</p> <p>\u6211\u4eec\u628a<code>I</code>\u4e2d\u51fa\u73b0\u7684\u6570\u5b57\u6bd4\u4f5c\u4e2a\u4eba\u7684\u94f6\u884c\u8d26\u6237\u7f16\u53f7\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u6700\u5927\u7684\u7f16\u53f7\u4e3a9\uff0c\u6240\u4ee5\u6211\u4eec\u6682\u65f6\u53ef\u4ee5\u53ea\u8003\u8651\u7f16\u53f70~9\u7684\u8d26\u6237\u60c5\u51b5\uff0c \u8fd910\u4e2a\u8d26\u6237\uff0c\u6b63\u597d\u5bf9\u5e94\u6700\u540e\u5f97\u5230F\u768410\u4e2a\u4f4d\u7f6e\u3002\u8fdb\u4e00\u6b65\u5730\uff0c<code>I</code>\u4e0e<code>X</code>\u7ed3\u5408\uff0c\u53ef\u4ee5\u770b\u4f5c\u8fd9\u4e9b\u94f6\u884c\u8d26\u6237\u4ea4\u6613\u7684\u6d41\u6c34\uff0c\u5176\u4e2d<code>I</code>\u4e3a\u8d26\u6237\u7f16\u53f7\uff0c<code>X</code>\u4e3a\u5bf9\u5e94\u7684\u91d1\u989d\u3002\u6bd4\u5982\uff0c\u56e0\u4e3a<code>I[0]=1</code>\uff0c\u6211\u4eec\u77e5\u9053\u662f\u8d26\u62371\u53d1\u751f\u4ea4\u6613\uff0c\u5bf9\u5e94\u7684<code>X[0]=1</code>\uff0c\u6240\u4ee5\u8d26\u62371\u7684\u91d1\u989d\u8981\u52a01\uff1b\u6b64\u5916\u8d26\u62371\u8fd8\u53d1\u751f\u4e00\u6b21\u4ea4\u6613\uff08<code>I[5]=1</code>\uff09, \u5bf9\u5e94\u7684\u91d1\u989d<code>X[5] = 6</code>\uff0c\u6240\u4ee5\u8fd9\u6bb5\u65f6\u95f4\u8d26\u62371\u603b\u7684\u91d1\u989d\u5c31\u662f<code>6 + 1 = 7</code>\uff0c\u6240\u4ee5\u5f97\u5230<code>F[1] = 7</code>.</p> <p>\u7b80\u8a00\u4e4b\uff0c\u6211\u4eec\u7684\u4efb\u52a1\u5c31\u662f\u6839\u636e<code>X</code>\u548c<code>I</code>\u7ec4\u6210\u7684\u4ea4\u6613\u6d41\u6c34\uff0c\u6765\u8ba1\u7b97\u5404\u4e2a\u8d26\u6237\u603b\u7684\u91d1\u989d\u3002</p> In\u00a0[131]: Copied! <pre># Author: Nadav Horesh\n\nw,h = 16, 16\nI = np.random.randint(0,2,(h,w,3)).astype(np.ubyte)\n</pre> # Author: Nadav Horesh  w,h = 16, 16 I = np.random.randint(0,2,(h,w,3)).astype(np.ubyte) In\u00a0[132]: Copied! <pre># \u6ce8\u610f\u6211\u4eec\u8fd9\u91cc\u5fc5\u987b\u5148\u4e58256*256\uff0c\u5426\u5219\u4f1a\u7206\u6808 \nF = I[...,0]*(256*256) + I[...,1]*256 +I[...,2]\nn = len(np.unique(F))\nprint(n)\n</pre> # \u6ce8\u610f\u6211\u4eec\u8fd9\u91cc\u5fc5\u987b\u5148\u4e58256*256\uff0c\u5426\u5219\u4f1a\u7206\u6808  F = I[...,0]*(256*256) + I[...,1]*256 +I[...,2] n = len(np.unique(F)) print(n) <pre>8\n</pre> In\u00a0[133]: Copied! <pre>A = np.random.randint(0,10,(3,4,3,4))\nA.sum(axis=(-2,-1))\n</pre> A = np.random.randint(0,10,(3,4,3,4)) A.sum(axis=(-2,-1)) Out[133]: <pre>array([[52, 44, 44, 68],\n       [61, 60, 44, 53],\n       [42, 66, 72, 57]])</pre> In\u00a0[134]: Copied! <pre>D = np.random.uniform(0,1,100)\nS = np.random.randint(0,10,100)\nD_sums = np.bincount(S, weights=D)\nD_counts = np.bincount(S)\nD_means = D_sums / D_counts\nprint(D_means)\n</pre> D = np.random.uniform(0,1,100) S = np.random.randint(0,10,100) D_sums = np.bincount(S, weights=D) D_counts = np.bincount(S) D_means = D_sums / D_counts print(D_means) <pre>[0.58150261 0.55134568 0.57372635 0.46632861 0.51824552 0.5358013\n 0.42991891 0.46169025 0.39369914 0.44701464]\n</pre> <p>\u7ed3\u540865\u9898\u7ed9\u51fa\u7684\u4f8b\u5b50\uff0c\u5728\u90a3\u91cc\u662f\u6839\u636e\u6d41\u6c34\u8ba1\u7b97\u5404\u4e2a\u8d26\u6237\u603b\u7684\u91d1\u989d\uff0c\u8fd9\u91cc\u662f\u8ba1\u7b97\u5404\u4e2a\u8d26\u6237\u6bcf\u6b21\u4ea4\u6613\u7684\u5e73\u5747\u91d1\u989d\uff0c\u4e5f\u5c31\u662f\u8be5\u8d26\u6237\u603b\u7684\u91d1\u989d\u9664\u4ee5\u5176\u4ea4\u6613\u7684\u6b21\u6570\u3002</p> In\u00a0[135]: Copied! <pre># Author: Mathieu Blondel\n\nA = np.random.uniform(0,1,(5,5))\nB = np.random.uniform(0,1,(5,5))\n\n# \u6162\u7684\u7248\u672c\nnp.diag(np.dot(A, B))\n\n# \u5feb\u7684\u7248\u672c\nnp.sum(A * B.T, axis=1)\n\n# \u66f4\u5feb\u7684\u7248\u672c\nnp.einsum(\"ij,ji-&gt;i\", A, B)\n</pre> # Author: Mathieu Blondel  A = np.random.uniform(0,1,(5,5)) B = np.random.uniform(0,1,(5,5))  # \u6162\u7684\u7248\u672c np.diag(np.dot(A, B))  # \u5feb\u7684\u7248\u672c np.sum(A * B.T, axis=1)  # \u66f4\u5feb\u7684\u7248\u672c np.einsum(\"ij,ji-&gt;i\", A, B) Out[135]: <pre>array([1.27203858, 1.95734402, 1.1140674 , 1.32168438, 0.85313171])</pre> In\u00a0[136]: Copied! <pre>z = np.array([1, 2, 3, 4, 5])\nnz = 3  # 0\u7684\u4e2a\u6570\nv = np.zeros(len(z) + nz*(len(z)-1))\nv[::nz+1] = z\nv\n</pre> z = np.array([1, 2, 3, 4, 5]) nz = 3  # 0\u7684\u4e2a\u6570 v = np.zeros(len(z) + nz*(len(z)-1)) v[::nz+1] = z v Out[136]: <pre>array([1., 0., 0., 0., 2., 0., 0., 0., 3., 0., 0., 0., 4., 0., 0., 0., 5.])</pre> In\u00a0[137]: Copied! <pre>A = np.ones((5,5,3))\nB = 2*np.ones((5,5))\nprint(A * B[:,:,None])\n</pre> A = np.ones((5,5,3)) B = 2*np.ones((5,5)) print(A * B[:,:,None]) <pre>[[[2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]]\n\n [[2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]]\n\n [[2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]]\n\n [[2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]]\n\n [[2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]\n  [2. 2. 2.]]]\n</pre> In\u00a0[138]: Copied! <pre>A = np.arange(25).reshape((5, 5))\nA\n</pre> A = np.arange(25).reshape((5, 5)) A Out[138]: <pre>array([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14],\n       [15, 16, 17, 18, 19],\n       [20, 21, 22, 23, 24]])</pre> In\u00a0[139]: Copied! <pre># \u4ea4\u6362\u7b2c\u4e00\u3001\u4e8c\u4e24\u884c\nA[[0, 1]] = A[[1, 0]]\nA\n</pre> # \u4ea4\u6362\u7b2c\u4e00\u3001\u4e8c\u4e24\u884c A[[0, 1]] = A[[1, 0]] A Out[139]: <pre>array([[ 5,  6,  7,  8,  9],\n       [ 0,  1,  2,  3,  4],\n       [10, 11, 12, 13, 14],\n       [15, 16, 17, 18, 19],\n       [20, 21, 22, 23, 24]])</pre> In\u00a0[140]: Copied! <pre>faces = np.random.randint(0,100,(10,3))\nF = np.roll(faces.repeat(2,axis=1),-1,axis=1)\nF = F.reshape(len(F)*3,2)\nF = np.sort(F,axis=1)\nG = F.view( dtype=[('p0',F.dtype),('p1',F.dtype)] )\nG = np.unique(G)\nprint(G)\n</pre> faces = np.random.randint(0,100,(10,3)) F = np.roll(faces.repeat(2,axis=1),-1,axis=1) F = F.reshape(len(F)*3,2) F = np.sort(F,axis=1) G = F.view( dtype=[('p0',F.dtype),('p1',F.dtype)] ) G = np.unique(G) print(G) <pre>[( 6, 31) ( 6, 96) ( 7, 30) ( 7, 82) (11, 18) (11, 48) (15, 28) (18, 48)\n (24, 29) (24, 65) (25, 51) (25, 84) (28, 28) (29, 32) (29, 65) (30, 82)\n (31, 96) (32, 65) (43, 77) (43, 88) (46, 54) (46, 71) (51, 84) (54, 71)\n (68, 83) (68, 89) (77, 88) (83, 89)]\n</pre> <p>\u611f\u89c9\u8fd9\u91cc\u7684\u65b9\u6cd5\u6bd4\u8f83\u5de7\u5999\uff0c\u53ef\u4ee5\u5c06\u6bcf\u4e00\u6b65\u62c6\u89e3\u6765\u7406\u89e3\u600e\u4e48\u5c06\u6bcf\u6761\u8fb9\u62bd\u53d6\u51fa\u6765\u3002\u4e4b\u540e\u6bd4\u8f83\u7ec6\u8282\u7684\u5730\u65b9\u5c31\u662f\u5bf9\u63cf\u8ff0\u201c\u8fb9\u201d\u7684\u4e8c\u5143\u7ec4\u6392\u5e8f(\u5982\u679c\u4e0d\u6392\u5e8f\uff0c\u540e\u9762\u6bd4\u8f83\u7684\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0(a, b)\u4e0e\uff08b, a\uff09\u4e0d\u662f\u540c\u4e00\u6761\u8fb9\u7684\u9519\u8bef\u5224\u65ad)\uff0c\u4e4b\u540e\u901a\u8fc7<code>view</code>\u8f6c\u5316\u7c7b\u578b\uff0c\u65b9\u4fbf\u6bd4\u8f83\uff08\u4f7f\u7528<code>np.unique</code>\uff09</p> In\u00a0[141]: Copied! <pre>C = np.bincount([1,1,2,3,4,4,6])\nA = np.repeat(np.arange(len(C)), C)\nprint(A)\n</pre> C = np.bincount([1,1,2,3,4,4,6]) A = np.repeat(np.arange(len(C)), C) print(A) <pre>[1 1 2 3 4 4 6]\n</pre> In\u00a0[142]: Copied! <pre>def moving_average(a, n=3) :\n    ret = np.cumsum(a, dtype=float)\n    ret[n:] = ret[n:] - ret[:-n]\n    return ret[n - 1:] / n\nZ = np.arange(20)\nprint(moving_average(Z, n=3))\n</pre> def moving_average(a, n=3) :     ret = np.cumsum(a, dtype=float)     ret[n:] = ret[n:] - ret[:-n]     return ret[n - 1:] / n Z = np.arange(20) print(moving_average(Z, n=3)) <pre>[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17. 18.]\n</pre> In\u00a0[143]: Copied! <pre>from numpy.lib import stride_tricks\n\ndef rolling(a, window):\n    shape = (a.size - window + 1, window)\n    strides = (a.itemsize, a.itemsize)\n    return stride_tricks.as_strided(a, shape=shape, strides=strides)\nZ = rolling(np.arange(10), 3)\nprint(Z)\n</pre> from numpy.lib import stride_tricks  def rolling(a, window):     shape = (a.size - window + 1, window)     strides = (a.itemsize, a.itemsize)     return stride_tricks.as_strided(a, shape=shape, strides=strides) Z = rolling(np.arange(10), 3) print(Z) <pre>[[0 1 2]\n [1 2 3]\n [2 3 4]\n [3 4 5]\n [4 5 6]\n [5 6 7]\n [6 7 8]\n [7 8 9]]\n</pre> In\u00a0[144]: Copied! <pre>Z = np.random.randint(0,2,100)\nnp.logical_not(Z, out=Z)\n\nZ = np.random.uniform(-1.0,1.0,100)\nnp.negative(Z, out=Z)\n</pre> Z = np.random.randint(0,2,100) np.logical_not(Z, out=Z)  Z = np.random.uniform(-1.0,1.0,100) np.negative(Z, out=Z) Out[144]: <pre>array([-0.73959528,  0.74138049, -0.94811162, -0.50843124, -0.83335491,\n        0.92459432,  0.42830231, -0.64581576,  0.45053274,  0.8965521 ,\n        0.70411344,  0.96701466, -0.56483325,  0.30175679, -0.49935569,\n        0.89009322,  0.84360355, -0.57868105,  0.25912389,  0.77807512,\n        0.18956795, -0.30259756,  0.12742359,  0.5950497 ,  0.11222084,\n       -0.48429619,  0.80796982, -0.02344253, -0.68723289, -0.9870873 ,\n       -0.26151235,  0.42905334,  0.74795648,  0.97328859,  0.32368876,\n        0.03135965, -0.09238209,  0.92792125,  0.8775511 ,  0.95367849,\n       -0.01477888,  0.46681795,  0.10938847, -0.94721852, -0.59555263,\n        0.43174897, -0.11157278,  0.60482401, -0.58120172,  0.82476071,\n       -0.67585093,  0.51747489,  0.13147537,  0.14427685,  0.79576564,\n       -0.81762747,  0.70197738, -0.81513605,  0.97909284,  0.65293123,\n       -0.67827731,  0.37949073, -0.69797135, -0.8226879 , -0.79980223,\n       -0.73445726, -0.67552438,  0.49271431, -0.68601626, -0.23525618,\n       -0.96835393, -0.22108029, -0.30339673, -0.30893032, -0.10465462,\n        0.6285398 , -0.96195274,  0.80812673, -0.49652576, -0.04923682,\n        0.41848055,  0.54361849, -0.00747832, -0.86391432, -0.14825956,\n       -0.97948923,  0.14045395,  0.1672885 , -0.25575461, -0.81473666,\n        0.86115452, -0.10080629,  0.69078833, -0.4371216 ,  0.7291862 ,\n        0.99090707, -0.07503235,  0.9668144 , -0.07102907,  0.90861586])</pre> In\u00a0[145]: Copied! <pre>def distance(P0, P1, p):\n    T = P1 - P0\n    L = (T**2).sum(axis=1)\n    U = -((P0[:,0]-p[...,0])*T[:,0] + (P0[:,1]-p[...,1])*T[:,1]) / L\n    U = U.reshape(len(U),1)\n    D = P0 + U*T - p\n    return np.sqrt((D**2).sum(axis=1))\n\nP0 = np.random.uniform(-10,10,(10,2))\nP1 = np.random.uniform(-10,10,(10,2))\np  = np.random.uniform(-10,10,( 1,2))\nprint(distance(P0, P1, p))\n</pre> def distance(P0, P1, p):     T = P1 - P0     L = (T**2).sum(axis=1)     U = -((P0[:,0]-p[...,0])*T[:,0] + (P0[:,1]-p[...,1])*T[:,1]) / L     U = U.reshape(len(U),1)     D = P0 + U*T - p     return np.sqrt((D**2).sum(axis=1))  P0 = np.random.uniform(-10,10,(10,2)) P1 = np.random.uniform(-10,10,(10,2)) p  = np.random.uniform(-10,10,( 1,2)) print(distance(P0, P1, p)) <pre>[ 1.01154163  5.12606935 13.94958511 22.07140895  0.94980679 11.10441586\n 10.13624982 15.90978826 12.76884591  7.35750952]\n</pre> In\u00a0[146]: Copied! <pre># based on distance function from previous question\nP0 = np.random.uniform(-10, 10, (10,2))\nP1 = np.random.uniform(-10,10,(10,2))\np = np.random.uniform(-10, 10, (10,2))\nprint(np.array([distance(P0,P1,p_i) for p_i in p]))\n</pre> # based on distance function from previous question P0 = np.random.uniform(-10, 10, (10,2)) P1 = np.random.uniform(-10,10,(10,2)) p = np.random.uniform(-10, 10, (10,2)) print(np.array([distance(P0,P1,p_i) for p_i in p])) <pre>[[ 3.5734595   0.66180336  7.3187876   4.99413157  0.96165362  1.50776605\n  15.24621075  5.09372975  5.79926051  2.37223415]\n [ 9.65216196  3.90422416  0.02454316  5.90288419  6.93066482  5.33370707\n   4.85444051  7.35964798  7.41460408  6.10650993]\n [ 3.0170691   9.17194136  4.03658393  0.93905036 11.63440516  9.62787647\n   2.93837077  6.05884677 13.55270024  0.66358603]\n [ 6.64712401  9.12738601  5.142417    5.57297746 12.16615989 10.53392643\n   0.31688742 10.17275773 12.38143328  2.29469197]\n [ 1.29889259  9.25138092  3.58160414  1.21483096 11.44657219  9.26597142\n   4.10370268  4.18161798 14.15205666  2.07913113]\n [ 0.9143175   0.64478816  6.63477487  7.52739507  1.96629743  0.70986043\n  15.51887126  6.57975813  7.63913062  0.12958737]\n [14.36169595  8.51086264 13.08230922  3.56073338  5.90285668  7.66843812\n  17.43569283  2.12028403  3.62911512 13.19184398]\n [14.54713139  1.95977899  0.74333133 10.87761572  5.58552605  4.39352621\n   3.75662835 10.64759725  4.38286275 10.59080599]\n [ 8.93133026  5.51552187  1.63519872  6.06603912  8.57874172  6.99229651\n   3.30246759  8.46418042  8.88224559  5.09797049]\n [10.31880276  1.36013315  5.98582952  3.20046907  1.2761327   0.53036216\n  11.17109363  1.81264107  3.14840606  8.03104193]]\n</pre> In\u00a0[147]: Copied! <pre># Author: Nicolas Rougier\n\nZ = np.random.randint(0,10,(10,10))\nshape = (5,5)\nfill  = 0\nposition = (1,1)\n\nR = np.ones(shape, dtype=Z.dtype)*fill\nP  = np.array(list(position)).astype(int)\nRs = np.array(list(R.shape)).astype(int)\nZs = np.array(list(Z.shape)).astype(int)\n\nR_start = np.zeros((len(shape),)).astype(int)\nR_stop  = np.array(list(shape)).astype(int)\nZ_start = (P-Rs//2)\nZ_stop  = (P+Rs//2)+Rs%2\n\nR_start = (R_start - np.minimum(Z_start,0)).tolist()\nZ_start = (np.maximum(Z_start,0)).tolist()\nR_stop = np.maximum(R_start, (R_stop - np.maximum(Z_stop-Zs,0))).tolist()\nZ_stop = (np.minimum(Z_stop,Zs)).tolist()\n\nr = [slice(start,stop) for start,stop in zip(R_start,R_stop)]\nz = [slice(start,stop) for start,stop in zip(Z_start,Z_stop)]\nR[r] = Z[z]\nprint(Z)\nprint(R)\n</pre>   # Author: Nicolas Rougier  Z = np.random.randint(0,10,(10,10)) shape = (5,5) fill  = 0 position = (1,1)  R = np.ones(shape, dtype=Z.dtype)*fill P  = np.array(list(position)).astype(int) Rs = np.array(list(R.shape)).astype(int) Zs = np.array(list(Z.shape)).astype(int)  R_start = np.zeros((len(shape),)).astype(int) R_stop  = np.array(list(shape)).astype(int) Z_start = (P-Rs//2) Z_stop  = (P+Rs//2)+Rs%2  R_start = (R_start - np.minimum(Z_start,0)).tolist() Z_start = (np.maximum(Z_start,0)).tolist() R_stop = np.maximum(R_start, (R_stop - np.maximum(Z_stop-Zs,0))).tolist() Z_stop = (np.minimum(Z_stop,Zs)).tolist()  r = [slice(start,stop) for start,stop in zip(R_start,R_stop)] z = [slice(start,stop) for start,stop in zip(Z_start,Z_stop)] R[r] = Z[z] print(Z) print(R) <pre>[[7 9 1 5 1 6 6 3 7 6]\n [9 5 1 4 5 8 5 4 4 7]\n [3 8 4 7 5 1 5 6 0 9]\n [2 9 9 5 4 1 1 4 7 8]\n [4 2 8 8 1 4 0 4 5 3]\n [2 9 5 0 4 6 9 6 9 0]\n [2 0 0 3 1 1 4 5 9 2]\n [1 4 4 7 2 7 1 5 6 3]\n [3 3 4 6 6 1 9 8 4 1]\n [7 9 2 1 8 9 7 7 4 5]]\n[[0 0 0 0 0]\n [0 7 9 1 5]\n [0 9 5 1 4]\n [0 3 8 4 7]\n [0 2 9 9 5]]\n</pre> <pre>/home/shensir/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:27: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n</pre> <p>PS: \u611f\u89c9\u96be\u5ea6\u4e3a\u4e09\u661f\u7684\u9898\u76ee\uff0864\u9898\u53ca\u4e4b\u540e\uff09\u5f88\u591a\u51fa\u7684\u4e0d\u592a\u597d...\u8003\u5bdf\u7684\u662f\u66f4\u52a0\u7075\u6d3b\u5730\u8fd0\u7528Numpy\uff0c\u903b\u8f91\u662f\u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u7f3a\u4e4f\u5177\u4f53\u7684\u793a\u4f8b\uff0c\u6ca1\u6709\u4f9d\u6258\u5b9e\u9645\u7684\u95ee\u9898\uff0c\u5c31\u663e\u5f97\u6bd4\u8f83\u7a7a\u6d1eOrz</p> In\u00a0[148]: Copied! <pre># 1\uff0c \u7b54\u6848\u7684\u65b9\u6cd5\nZ = np.arange(1,15,dtype=np.uint32)\nR = stride_tricks.as_strided(Z,(11,4),(4,4))\nprint(R)\n</pre> # 1\uff0c \u7b54\u6848\u7684\u65b9\u6cd5 Z = np.arange(1,15,dtype=np.uint32) R = stride_tricks.as_strided(Z,(11,4),(4,4)) print(R) <pre>[[ 1  2  3  4]\n [ 2  3  4  5]\n [ 3  4  5  6]\n [ 4  5  6  7]\n [ 5  6  7  8]\n [ 6  7  8  9]\n [ 7  8  9 10]\n [ 8  9 10 11]\n [ 9 10 11 12]\n [10 11 12 13]\n [11 12 13 14]]\n</pre> In\u00a0[149]: Copied! <pre># 2\uff0c 76\u9898\u7684\u4e00\u4e2a\u7279\u6b8a\u5f62\u5f0f\nz = np.arange(1, 15)\nrolling(z, 4)\n</pre> # 2\uff0c 76\u9898\u7684\u4e00\u4e2a\u7279\u6b8a\u5f62\u5f0f z = np.arange(1, 15) rolling(z, 4) Out[149]: <pre>array([[ 1,  2,  3,  4],\n       [ 2,  3,  4,  5],\n       [ 3,  4,  5,  6],\n       [ 4,  5,  6,  7],\n       [ 5,  6,  7,  8],\n       [ 6,  7,  8,  9],\n       [ 7,  8,  9, 10],\n       [ 8,  9, 10, 11],\n       [ 9, 10, 11, 12],\n       [10, 11, 12, 13],\n       [11, 12, 13, 14]])</pre> In\u00a0[150]: Copied! <pre># 1\uff0c \u7b54\u6848\u7684\u65b9\u6cd5\nZ = np.random.uniform(0,1,(10,10))\nU, S, V = np.linalg.svd(Z) # Singular Value Decomposition\nrank = np.sum(S &gt; 1e-10)\nprint(rank)\n</pre> # 1\uff0c \u7b54\u6848\u7684\u65b9\u6cd5 Z = np.random.uniform(0,1,(10,10)) U, S, V = np.linalg.svd(Z) # Singular Value Decomposition rank = np.sum(S &gt; 1e-10) print(rank) <pre>10\n</pre> In\u00a0[151]: Copied! <pre># 2\uff0c \u8c03\u7528API\nnp.linalg.matrix_rank(Z)\n</pre> # 2\uff0c \u8c03\u7528API np.linalg.matrix_rank(Z) Out[151]: <pre>10</pre> In\u00a0[152]: Copied! <pre>Z = np.random.randint(0,10,50)\nZ\n</pre> Z = np.random.randint(0,10,50) Z Out[152]: <pre>array([1, 8, 0, 9, 3, 8, 0, 5, 5, 3, 8, 4, 2, 1, 6, 1, 7, 5, 2, 3, 3, 7,\n       0, 6, 0, 4, 2, 0, 9, 0, 1, 7, 5, 7, 9, 3, 7, 5, 0, 2, 9, 1, 7, 5,\n       0, 9, 2, 2, 2, 0])</pre> In\u00a0[153]: Copied! <pre>print(np.bincount(Z).argmax())\n</pre> print(np.bincount(Z).argmax()) <pre>0\n</pre> <p>\u5982\u679c\u4e0d\u9650\u5236\u5728Numpy\u4e4b\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528Scipy\u63d0\u4f9b\u7684API</p> In\u00a0[154]: Copied! <pre>from scipy import stats\nstats.mode(Z)\n</pre> from scipy import stats stats.mode(Z) Out[154]: <pre>ModeResult(mode=array([0]), count=array([9]))</pre> In\u00a0[155]: Copied! <pre>Z = np.random.randint(0,5,(10,10))\nn = 3\ni = 1 + (Z.shape[0]-3)\nj = 1 + (Z.shape[1]-3)\nC = stride_tricks.as_strided(Z, shape=(i, j, n, n), strides=Z.strides + Z.strides)\nprint(C)\n</pre> Z = np.random.randint(0,5,(10,10)) n = 3 i = 1 + (Z.shape[0]-3) j = 1 + (Z.shape[1]-3) C = stride_tricks.as_strided(Z, shape=(i, j, n, n), strides=Z.strides + Z.strides) print(C) <pre>[[[[1 0 3]\n   [4 4 1]\n   [4 1 4]]\n\n  [[0 3 1]\n   [4 1 1]\n   [1 4 0]]\n\n  [[3 1 3]\n   [1 1 2]\n   [4 0 4]]\n\n  [[1 3 3]\n   [1 2 2]\n   [0 4 2]]\n\n  [[3 3 2]\n   [2 2 1]\n   [4 2 1]]\n\n  [[3 2 0]\n   [2 1 1]\n   [2 1 0]]\n\n  [[2 0 1]\n   [1 1 1]\n   [1 0 1]]\n\n  [[0 1 2]\n   [1 1 1]\n   [0 1 4]]]\n\n\n [[[4 4 1]\n   [4 1 4]\n   [1 1 1]]\n\n  [[4 1 1]\n   [1 4 0]\n   [1 1 1]]\n\n  [[1 1 2]\n   [4 0 4]\n   [1 1 1]]\n\n  [[1 2 2]\n   [0 4 2]\n   [1 1 4]]\n\n  [[2 2 1]\n   [4 2 1]\n   [1 4 4]]\n\n  [[2 1 1]\n   [2 1 0]\n   [4 4 0]]\n\n  [[1 1 1]\n   [1 0 1]\n   [4 0 1]]\n\n  [[1 1 1]\n   [0 1 4]\n   [0 1 4]]]\n\n\n [[[4 1 4]\n   [1 1 1]\n   [4 4 3]]\n\n  [[1 4 0]\n   [1 1 1]\n   [4 3 3]]\n\n  [[4 0 4]\n   [1 1 1]\n   [3 3 1]]\n\n  [[0 4 2]\n   [1 1 4]\n   [3 1 4]]\n\n  [[4 2 1]\n   [1 4 4]\n   [1 4 4]]\n\n  [[2 1 0]\n   [4 4 0]\n   [4 4 0]]\n\n  [[1 0 1]\n   [4 0 1]\n   [4 0 1]]\n\n  [[0 1 4]\n   [0 1 4]\n   [0 1 0]]]\n\n\n [[[1 1 1]\n   [4 4 3]\n   [2 3 3]]\n\n  [[1 1 1]\n   [4 3 3]\n   [3 3 1]]\n\n  [[1 1 1]\n   [3 3 1]\n   [3 1 0]]\n\n  [[1 1 4]\n   [3 1 4]\n   [1 0 0]]\n\n  [[1 4 4]\n   [1 4 4]\n   [0 0 2]]\n\n  [[4 4 0]\n   [4 4 0]\n   [0 2 3]]\n\n  [[4 0 1]\n   [4 0 1]\n   [2 3 0]]\n\n  [[0 1 4]\n   [0 1 0]\n   [3 0 3]]]\n\n\n [[[4 4 3]\n   [2 3 3]\n   [4 0 0]]\n\n  [[4 3 3]\n   [3 3 1]\n   [0 0 2]]\n\n  [[3 3 1]\n   [3 1 0]\n   [0 2 1]]\n\n  [[3 1 4]\n   [1 0 0]\n   [2 1 4]]\n\n  [[1 4 4]\n   [0 0 2]\n   [1 4 1]]\n\n  [[4 4 0]\n   [0 2 3]\n   [4 1 4]]\n\n  [[4 0 1]\n   [2 3 0]\n   [1 4 1]]\n\n  [[0 1 0]\n   [3 0 3]\n   [4 1 0]]]\n\n\n [[[2 3 3]\n   [4 0 0]\n   [4 0 2]]\n\n  [[3 3 1]\n   [0 0 2]\n   [0 2 2]]\n\n  [[3 1 0]\n   [0 2 1]\n   [2 2 2]]\n\n  [[1 0 0]\n   [2 1 4]\n   [2 2 4]]\n\n  [[0 0 2]\n   [1 4 1]\n   [2 4 4]]\n\n  [[0 2 3]\n   [4 1 4]\n   [4 4 1]]\n\n  [[2 3 0]\n   [1 4 1]\n   [4 1 0]]\n\n  [[3 0 3]\n   [4 1 0]\n   [1 0 3]]]\n\n\n [[[4 0 0]\n   [4 0 2]\n   [1 4 0]]\n\n  [[0 0 2]\n   [0 2 2]\n   [4 0 3]]\n\n  [[0 2 1]\n   [2 2 2]\n   [0 3 3]]\n\n  [[2 1 4]\n   [2 2 4]\n   [3 3 4]]\n\n  [[1 4 1]\n   [2 4 4]\n   [3 4 1]]\n\n  [[4 1 4]\n   [4 4 1]\n   [4 1 2]]\n\n  [[1 4 1]\n   [4 1 0]\n   [1 2 2]]\n\n  [[4 1 0]\n   [1 0 3]\n   [2 2 0]]]\n\n\n [[[4 0 2]\n   [1 4 0]\n   [2 1 4]]\n\n  [[0 2 2]\n   [4 0 3]\n   [1 4 3]]\n\n  [[2 2 2]\n   [0 3 3]\n   [4 3 4]]\n\n  [[2 2 4]\n   [3 3 4]\n   [3 4 0]]\n\n  [[2 4 4]\n   [3 4 1]\n   [4 0 2]]\n\n  [[4 4 1]\n   [4 1 2]\n   [0 2 3]]\n\n  [[4 1 0]\n   [1 2 2]\n   [2 3 2]]\n\n  [[1 0 3]\n   [2 2 0]\n   [3 2 4]]]]\n</pre> In\u00a0[156]: Copied! <pre># Author: Eric O. Lebigot\n# Note: only works for 2d array and value setting using indices\n\nclass Symetric(np.ndarray):\n    def __setitem__(self, index, value):\n        i,j = index\n        super(Symetric, self).__setitem__((i,j), value)\n        super(Symetric, self).__setitem__((j,i), value)\n\ndef symetric(Z):\n    return np.asarray(Z + Z.T - np.diag(Z.diagonal())).view(Symetric)\n\nS = symetric(np.random.randint(0,10,(5,5)))\nS[2,3] = 42\nprint(S)\n</pre> # Author: Eric O. Lebigot # Note: only works for 2d array and value setting using indices  class Symetric(np.ndarray):     def __setitem__(self, index, value):         i,j = index         super(Symetric, self).__setitem__((i,j), value)         super(Symetric, self).__setitem__((j,i), value)  def symetric(Z):     return np.asarray(Z + Z.T - np.diag(Z.diagonal())).view(Symetric)  S = symetric(np.random.randint(0,10,(5,5))) S[2,3] = 42 print(S) <pre>[[ 8 18 10 16 17]\n [18  7  5 14  8]\n [10  5  2 42  4]\n [16 14 42  6 13]\n [17  8  4 13  0]]\n</pre> In\u00a0[157]: Copied! <pre>p, n = 10, 20\nM = np.ones((p,n,n))\nV = np.ones((p,n,1))\nS = np.tensordot(M, V, axes=[[0, 2], [0, 1]])\nprint(S)\n</pre> p, n = 10, 20 M = np.ones((p,n,n)) V = np.ones((p,n,1)) S = np.tensordot(M, V, axes=[[0, 2], [0, 1]]) print(S) <pre>[[200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]\n [200.]]\n</pre> In\u00a0[158]: Copied! <pre>Z = np.ones((16,16))\nk = 4\nS = np.add.reduceat(np.add.reduceat(Z, np.arange(0, Z.shape[0], k), axis=0),\n                                       np.arange(0, Z.shape[1], k), axis=1)\nprint(S)\n</pre> Z = np.ones((16,16)) k = 4 S = np.add.reduceat(np.add.reduceat(Z, np.arange(0, Z.shape[0], k), axis=0),                                        np.arange(0, Z.shape[1], k), axis=1) print(S) <pre>[[16. 16. 16. 16.]\n [16. 16. 16. 16.]\n [16. 16. 16. 16.]\n [16. 16. 16. 16.]]\n</pre> In\u00a0[159]: Copied! <pre>def iterate(Z):\n    # Count neighbours\n    N = (Z[0:-2,0:-2] + Z[0:-2,1:-1] + Z[0:-2,2:] +\n         Z[1:-1,0:-2]                + Z[1:-1,2:] +\n         Z[2:  ,0:-2] + Z[2:  ,1:-1] + Z[2:  ,2:])\n\n    # Apply rules\n    birth = (N==3) &amp; (Z[1:-1,1:-1]==0)\n    survive = ((N==2) | (N==3)) &amp; (Z[1:-1,1:-1]==1)\n    Z[...] = 0\n    Z[1:-1,1:-1][birth | survive] = 1\n    return Z\n\nZ = np.random.randint(0,2,(50,50))\nfor i in range(100): Z = iterate(Z)\nprint(Z)\n</pre> def iterate(Z):     # Count neighbours     N = (Z[0:-2,0:-2] + Z[0:-2,1:-1] + Z[0:-2,2:] +          Z[1:-1,0:-2]                + Z[1:-1,2:] +          Z[2:  ,0:-2] + Z[2:  ,1:-1] + Z[2:  ,2:])      # Apply rules     birth = (N==3) &amp; (Z[1:-1,1:-1]==0)     survive = ((N==2) | (N==3)) &amp; (Z[1:-1,1:-1]==1)     Z[...] = 0     Z[1:-1,1:-1][birth | survive] = 1     return Z  Z = np.random.randint(0,2,(50,50)) for i in range(100): Z = iterate(Z) print(Z) <pre>[[0 0 0 ... 0 0 0]\n [0 0 0 ... 0 0 0]\n [0 0 0 ... 0 0 0]\n ...\n [0 0 0 ... 0 0 0]\n [0 0 0 ... 0 0 0]\n [0 0 0 ... 0 0 0]]\n</pre> In\u00a0[160]: Copied! <pre>Z = np.arange(10000)\nnp.random.shuffle(Z)\nn = 5\n</pre> Z = np.arange(10000) np.random.shuffle(Z) n = 5 In\u00a0[161]: Copied! <pre># \u8f83\u6162\nprint (Z[np.argsort(Z)[-n:]])\n</pre> # \u8f83\u6162 print (Z[np.argsort(Z)[-n:]]) <pre>[9995 9996 9997 9998 9999]\n</pre> In\u00a0[162]: Copied! <pre># \u8f83\u5feb\nprint (Z[np.argpartition(-Z,n)[:n]])\n</pre> # \u8f83\u5feb print (Z[np.argpartition(-Z,n)[:n]]) <pre>[9999 9997 9998 9996 9995]\n</pre> In\u00a0[163]: Copied! <pre>def cartesian(arrays):\n    arrays = [np.asarray(a) for a in arrays]\n    shape = (len(x) for x in arrays)\n\n    ix = np.indices(shape, dtype=int)\n    ix = ix.reshape(len(arrays), -1).T\n\n    for n, arr in enumerate(arrays):\n        ix[:, n] = arrays[n][ix[:, n]]\n\n    return ix\n\nprint (cartesian(([1, 2, 3], [4, 5], [6, 7])))\n</pre> def cartesian(arrays):     arrays = [np.asarray(a) for a in arrays]     shape = (len(x) for x in arrays)      ix = np.indices(shape, dtype=int)     ix = ix.reshape(len(arrays), -1).T      for n, arr in enumerate(arrays):         ix[:, n] = arrays[n][ix[:, n]]      return ix  print (cartesian(([1, 2, 3], [4, 5], [6, 7]))) <pre>[[1 4 6]\n [1 4 7]\n [1 5 6]\n [1 5 7]\n [2 4 6]\n [2 4 7]\n [2 5 6]\n [2 5 7]\n [3 4 6]\n [3 4 7]\n [3 5 6]\n [3 5 7]]\n</pre> In\u00a0[164]: Copied! <pre>Z = np.array([(\"Hello\", 2.5, 3),\n              (\"World\", 3.6, 2)])\nZ\n</pre> Z = np.array([(\"Hello\", 2.5, 3),               (\"World\", 3.6, 2)]) Z Out[164]: <pre>array([['Hello', '2.5', '3'],\n       ['World', '3.6', '2']], dtype='&lt;U5')</pre> In\u00a0[165]: Copied! <pre>R = np.core.records.fromarrays(Z.T, \n                               names='col1, col2, col3',\n                               formats = 'S8, f8, i8')\nR\n</pre> R = np.core.records.fromarrays(Z.T,                                 names='col1, col2, col3',                                formats = 'S8, f8, i8') R Out[165]: <pre>rec.array([(b'Hello', 2.5, 3), (b'World', 3.6, 2)],\n          dtype=[('col1', 'S8'), ('col2', '&lt;f8'), ('col3', '&lt;i8')])</pre> In\u00a0[166]: Copied! <pre>x = np.random.rand(int(5e7))\n</pre> x = np.random.rand(int(5e7)) In\u00a0[167]: Copied! <pre>%timeit np.power(x,3)\n</pre> %timeit np.power(x,3) <pre>4.07 s \u00b1 79.1 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n</pre> In\u00a0[168]: Copied! <pre>%timeit x*x*x\n</pre> %timeit x*x*x <pre>230 ms \u00b1 3.23 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n</pre> In\u00a0[169]: Copied! <pre>%timeit np.einsum('i,i,i-&gt;i',x,x,x)\n</pre> %timeit np.einsum('i,i,i-&gt;i',x,x,x) <pre>316 ms \u00b1 16.9 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n</pre> In\u00a0[170]: Copied! <pre>A = np.random.randint(0,5,(8,3))\nB = np.random.randint(0,5,(2,2))\n\nC = (A[..., np.newaxis, np.newaxis] == B)\nrows = np.where(C.any((3,1)).all(1))[0]\nprint(rows)\n</pre> A = np.random.randint(0,5,(8,3)) B = np.random.randint(0,5,(2,2))  C = (A[..., np.newaxis, np.newaxis] == B) rows = np.where(C.any((3,1)).all(1))[0] print(rows) <pre>[2 3 4 5 6]\n</pre> In\u00a0[171]: Copied! <pre>Z = np.random.randint(0,5,(10,3))\nZ\n</pre> Z = np.random.randint(0,5,(10,3)) Z Out[171]: <pre>array([[2, 3, 4],\n       [0, 2, 2],\n       [0, 1, 1],\n       [2, 2, 3],\n       [0, 3, 0],\n       [4, 2, 2],\n       [0, 2, 4],\n       [4, 2, 1],\n       [1, 0, 3],\n       [0, 0, 0]])</pre> In\u00a0[172]: Copied! <pre># \u9002\u7528\u4e8e\u4efb\u610f\u6570\u636e\u7c7b\u578b\nE = np.all(Z[:,1:] == Z[:,:-1], axis=1)\nU = Z[~E]\nU\n</pre> # \u9002\u7528\u4e8e\u4efb\u610f\u6570\u636e\u7c7b\u578b E = np.all(Z[:,1:] == Z[:,:-1], axis=1) U = Z[~E] U Out[172]: <pre>array([[2, 3, 4],\n       [0, 2, 2],\n       [0, 1, 1],\n       [2, 2, 3],\n       [0, 3, 0],\n       [4, 2, 2],\n       [0, 2, 4],\n       [4, 2, 1],\n       [1, 0, 3]])</pre> In\u00a0[173]: Copied! <pre># \u4ec5\u9002\u7528\u4e8e\u6570\u503c\u7c7b\u578b\nU = Z[Z.max(axis=1) != Z.min(axis=1),:]\nU\n</pre> # \u4ec5\u9002\u7528\u4e8e\u6570\u503c\u7c7b\u578b U = Z[Z.max(axis=1) != Z.min(axis=1),:] U Out[173]: <pre>array([[2, 3, 4],\n       [0, 2, 2],\n       [0, 1, 1],\n       [2, 2, 3],\n       [0, 3, 0],\n       [4, 2, 2],\n       [0, 2, 4],\n       [4, 2, 1],\n       [1, 0, 3]])</pre> In\u00a0[174]: Copied! <pre>I = np.array([0, 1, 2, 3, 15, 16, 32, 64, 128], dtype=np.uint8)\nprint(np.unpackbits(I[:, np.newaxis], axis=1))\n</pre> I = np.array([0, 1, 2, 3, 15, 16, 32, 64, 128], dtype=np.uint8) print(np.unpackbits(I[:, np.newaxis], axis=1)) <pre>[[0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 1]\n [0 0 0 0 0 0 1 0]\n [0 0 0 0 0 0 1 1]\n [0 0 0 0 1 1 1 1]\n [0 0 0 1 0 0 0 0]\n [0 0 1 0 0 0 0 0]\n [0 1 0 0 0 0 0 0]\n [1 0 0 0 0 0 0 0]]\n</pre> In\u00a0[175]: Copied! <pre>Z = np.random.randint(0,2,(6,3))\nZ\n</pre> Z = np.random.randint(0,2,(6,3)) Z Out[175]: <pre>array([[0, 0, 0],\n       [0, 1, 1],\n       [0, 0, 0],\n       [1, 1, 1],\n       [0, 1, 0],\n       [0, 0, 0]])</pre> In\u00a0[176]: Copied! <pre>uZ = np.unique(Z, axis=0)\nuZ\n</pre> uZ = np.unique(Z, axis=0) uZ Out[176]: <pre>array([[0, 0, 0],\n       [0, 1, 0],\n       [0, 1, 1],\n       [1, 1, 1]])</pre> In\u00a0[177]: Copied! <pre>A = np.random.uniform(0,1,10)\nB = np.random.uniform(0,1,10)\n\nnp.einsum('i-&gt;', A)       # np.sum(A)\nnp.einsum('i,i-&gt;i', A, B) # A * B\nnp.einsum('i,i', A, B)    # np.inner(A, B)\nnp.einsum('i,j-&gt;ij', A, B)    # np.outer(A, B)\n</pre> A = np.random.uniform(0,1,10) B = np.random.uniform(0,1,10)  np.einsum('i-&gt;', A)       # np.sum(A) np.einsum('i,i-&gt;i', A, B) # A * B np.einsum('i,i', A, B)    # np.inner(A, B) np.einsum('i,j-&gt;ij', A, B)    # np.outer(A, B) Out[177]: <pre>array([[0.05623017, 0.0435339 , 0.06410929, 0.00515166, 0.04477097,\n        0.00687832, 0.01534161, 0.03621964, 0.02564694, 0.01010714],\n       [0.25008018, 0.19361432, 0.28512209, 0.02291169, 0.19911611,\n        0.03059089, 0.06823086, 0.16108458, 0.11406317, 0.04495087],\n       [0.37356092, 0.28921422, 0.42590529, 0.03422467, 0.29743259,\n        0.04569558, 0.10192084, 0.24062245, 0.17038353, 0.06714602],\n       [0.20315391, 0.15728358, 0.23162038, 0.01861243, 0.16175298,\n        0.02485066, 0.05542769, 0.13085788, 0.0926598 , 0.03651607],\n       [0.32736782, 0.25345111, 0.37323949, 0.02999258, 0.26065323,\n        0.04004504, 0.08931771, 0.21086801, 0.14931456, 0.05884301],\n       [0.45291908, 0.35065402, 0.51638333, 0.04149526, 0.36061828,\n        0.05540302, 0.1235726 , 0.29173956, 0.20657929, 0.08141032],\n       [0.1605851 , 0.12432643, 0.18308672, 0.01471239, 0.12785931,\n        0.01964346, 0.04381338, 0.10343796, 0.07324389, 0.0288645 ],\n       [0.39477812, 0.30564078, 0.45009551, 0.03616854, 0.31432592,\n        0.04829096, 0.10770966, 0.25428912, 0.18006083, 0.07095973],\n       [0.54263895, 0.42011596, 0.61867499, 0.04971516, 0.43205405,\n        0.06637794, 0.1480514 , 0.34953097, 0.2475011 , 0.0975371 ],\n       [0.38241351, 0.29606798, 0.43599833, 0.03503572, 0.3044811 ,\n        0.04677847, 0.10433615, 0.24632468, 0.17442125, 0.06873724]])</pre> In\u00a0[178]: Copied! <pre>phi = np.arange(0, 10*np.pi, 0.1)\na = 1\nx = a*phi*np.cos(phi)\ny = a*phi*np.sin(phi)\n\ndr = (np.diff(x)**2 + np.diff(y)**2)**.5 # segment lengths\nr = np.zeros_like(x)\nr[1:] = np.cumsum(dr)                # integrate path\nr_int = np.linspace(0, r.max(), 200) # regular spaced path\nx_int = np.interp(r_int, r, x)       # integrate path\ny_int = np.interp(r_int, r, y)\n</pre> phi = np.arange(0, 10*np.pi, 0.1) a = 1 x = a*phi*np.cos(phi) y = a*phi*np.sin(phi)  dr = (np.diff(x)**2 + np.diff(y)**2)**.5 # segment lengths r = np.zeros_like(x) r[1:] = np.cumsum(dr)                # integrate path r_int = np.linspace(0, r.max(), 200) # regular spaced path x_int = np.interp(r_int, r, x)       # integrate path y_int = np.interp(r_int, r, y) In\u00a0[179]: Copied! <pre>X = np.asarray([[1.0, 0.0, 3.0, 8.0],\n                [2.0, 0.0, 1.0, 1.0],\n                [1.5, 2.5, 1.0, 0.0]])\nn = 4\nM = np.logical_and.reduce(np.mod(X, 1) == 0, axis=-1)\nM &amp;= (X.sum(axis=-1) == n)\nprint(X[M])\n</pre> X = np.asarray([[1.0, 0.0, 3.0, 8.0],                 [2.0, 0.0, 1.0, 1.0],                 [1.5, 2.5, 1.0, 0.0]]) n = 4 M = np.logical_and.reduce(np.mod(X, 1) == 0, axis=-1) M &amp;= (X.sum(axis=-1) == n) print(X[M]) <pre>[[2. 0. 1. 1.]]\n</pre> In\u00a0[180]: Copied! <pre>X = np.random.randn(100) \nN = 1000  # \u518d\u62bd\u6837\u6b21\u6570\nidx = np.random.randint(0, X.size, (N, X.size))\nmeans = X[idx].mean(axis=1)\nconfint = np.percentile(means, [2.5, 97.5])\nprint(confint)\n</pre> X = np.random.randn(100)  N = 1000  # \u518d\u62bd\u6837\u6b21\u6570 idx = np.random.randint(0, X.size, (N, X.size)) means = X[idx].mean(axis=1) confint = np.percentile(means, [2.5, 97.5]) print(confint) <pre>[-0.29266392  0.11041998]\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"100-Numpy-Exercises/#100-numpy-exercises","title":"100 Numpy Exercises\u00b6","text":"<p>numpy-100\u4e2d\u6587\u7248\u53ca\u4e00\u4e9b\u6ce8\u89e3\u3002</p>"},{"location":"100-Numpy-Exercises/#1-numpy","title":"1. \u5bfc\u5165Numpy\u00b6","text":""},{"location":"100-Numpy-Exercises/#2-numpy","title":"2. \u6253\u5370Numpy\u7248\u672c\u53f7\u53ca\u5176\u914d\u7f6e\u00b6","text":""},{"location":"100-Numpy-Exercises/#3-size10vector","title":"3. \u521b\u5efa\u4e00\u4e2a\u957f\u5ea6(size)\u4e3a10\u7684\u5411\u91cf(vector)\u00b6","text":"<p>\u6ce8\u610f\u8fd9\u91cc\u5c31\u662f\u521b\u5efa\u4e00\u4e2a<code>np.ndarray</code></p>"},{"location":"100-Numpy-Exercises/#4","title":"4. \u8ba1\u7b97\u6570\u7ec4\u7684\u5185\u5b58\u5927\u5c0f\u00b6","text":""},{"location":"100-Numpy-Exercises/#5-numpyadd","title":"5. \u5728\u547d\u4ee4\u884c\u6253\u5370\u51faNumpy\u4e2dadd\u51fd\u6570\u7684\u5e2e\u52a9\u6587\u6863\u4fe1\u606f\u00b6","text":""},{"location":"100-Numpy-Exercises/#6-101-0","title":"6. \u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a10\u7684\u5411\u91cf\uff0c\u5176\u7b2c\u4e94\u4e2a\u503c\u4e3a1\uff0c \u5176\u4ed6\u4e3a0\u00b6","text":""},{"location":"100-Numpy-Exercises/#7-1049","title":"7. \u521b\u5efa\u4e00\u4e2a\u5305\u542b\u4ece10\u523049\u6240\u6709\u6574\u6570\u7684\u5411\u91cf\u00b6","text":""},{"location":"100-Numpy-Exercises/#8","title":"8. \u53cd\u8f6c\u4e00\u4e2a\u5411\u91cf\uff08\u9006\u5e8f\uff09\u00b6","text":""},{"location":"100-Numpy-Exercises/#9-3x3-08","title":"9. \u521b\u5efa\u4e00\u4e2a3x3\u7684\u77e9\u9635\uff0c \u5305\u542b\u6570\u5b570\u52308\u00b6","text":""},{"location":"100-Numpy-Exercises/#10-120040-0","title":"10. \u627e\u51fa[1,2,0,0,4,0] \u4e2d\u975e0\u6570\u5b57\u7684\u4f4d\u7f6e\u00b6","text":""},{"location":"100-Numpy-Exercises/#11-3x3","title":"11. \u521b\u5efa3x3\u7684\u5355\u4f4d\u77e9\u9635\u00b6","text":""},{"location":"100-Numpy-Exercises/#12-3x3x3","title":"12. \u521b\u5efa3x3x3\u6570\u7ec4\uff0c\u4ee5\u968f\u673a\u6570\u5b57\u586b\u5145\u00b6","text":""},{"location":"100-Numpy-Exercises/#13-10x10","title":"13. \u521b\u5efa10x10\u6570\u7ec4\uff0c\u4ee5\u968f\u673a\u6570\u5b57\u586b\u5145\uff0c\u5e76\u627e\u51fa\u5176\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u00b6","text":""},{"location":"100-Numpy-Exercises/#14-10","title":"14. \u521b\u5efa\u957f\u5ea6\u4e3a10\u7684\u968f\u673a\u5411\u91cf\uff0c\u5e76\u8ba1\u7b97\u5176\u5747\u503c\u00b6","text":""},{"location":"100-Numpy-Exercises/#15-10","title":"15. \u521b\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5176\u8fb9\u754c\u503c\u4e3a1\uff0c\u5185\u90e8\u503c\u4e3a0\u00b6","text":""},{"location":"100-Numpy-Exercises/#16-nxn0","title":"16. \u5c06\u73b0\u6709\u7684\u6570\u7ec4\uff08nxn\uff09\u75280\u7ec4\u6210\u7684\u8fb9\u754c\u5305\u88f9\u00b6","text":""},{"location":"100-Numpy-Exercises/#17","title":"17. \u4e0b\u5217\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\u00b6","text":"<pre>0 * np.nan\nnp.nan == np.nan\nnp.inf &gt; np.nan\nnp.nan - np.nan\nnp.nan in set([np.nan])\n0.3 == 3 * 0.1\n</pre>"},{"location":"100-Numpy-Exercises/#18-5x51234","title":"18. \u521b\u5efa\u4e00\u4e2a5x5\u7684\u77e9\u9635\uff0c\u5176\u4e2d1\uff0c2\uff0c3\uff0c4\u6b63\u597d\u5728\u77e9\u9635\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e0b\u65b9\u00b6","text":""},{"location":"100-Numpy-Exercises/#19-8x801","title":"19. \u521b\u5efa\u4e00\u4e2a8x8\u7684\u77e9\u9635\uff0c\u5e76\u75280\uff0c1\u6807\u8bb0\u4e3a\u56fd\u9645\u8c61\u68cb\u68cb\u76d8\u7684\u5f62\u5f0f\u00b6","text":"<p>\u5982\u4e0b\u6240\u793a, \u9ed1\u8272\u90e8\u5206\u6807\u8bb0\u4e3a1. </p>"},{"location":"100-Numpy-Exercises/#20-6x7x8100x-y-z","title":"20. \u73b0\u6709\u7ef4\u5ea6\u4e3a6x7x8\u7684\u6570\u7ec4\uff0c\u627e\u51fa\u5176\u4e2d\u7b2c100\u4e2a\u5143\u7d20\u7684\u7d22\u5f15(x, y, z)\u00b6","text":""},{"location":"100-Numpy-Exercises/#21-tile8x8","title":"21. \u7528<code>tile</code>\u51fd\u6570\u521b\u5efa\u4e00\u4e2a8x8\u7684\u68cb\u76d8\u00b6","text":""},{"location":"100-Numpy-Exercises/#22-5x5","title":"22. \u6807\u51c6\u5316\u4e00\u4e2a5x5\u7684\u968f\u673a\u77e9\u9635\u00b6","text":""},{"location":"100-Numpy-Exercises/#23-rgbadtype","title":"23. \u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5305\u542b\u56db\u4e2a\u65e0\u7b26\u53f7\u5b57\u8282\uff08RGBA\uff09\u7684<code>dtype</code>\u6765\u63cf\u8ff0\u989c\u8272\u00b6","text":""},{"location":"100-Numpy-Exercises/#24-5x33x2","title":"24. 5x3\u7684\u77e9\u9635\u4e0e3x2\u7684\u77e9\u9635\u76f8\u4e58\u00b6","text":""},{"location":"100-Numpy-Exercises/#25-38","title":"25. \u7ed9\u5b9a\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u5c06\u503c\u57283\u548c8\u4e4b\u95f4\u7684\u6570\u5b57\u53d8\u4e3a\u5176\u8d1f\u6570\u00b6","text":""},{"location":"100-Numpy-Exercises/#26","title":"26. \u4e0b\u9762\u811a\u672c\u7684\u8f93\u51fa\u662f\u4ec0\u4e48\u00b6","text":"<pre># Author: Jake VanderPlas\n\nprint(sum(range(5),-1))\nfrom numpy import *\nprint(sum(range(5),-1))\n</pre>"},{"location":"100-Numpy-Exercises/#27-z","title":"27. <code>z</code>\u662f\u6574\u6570\u7ec4\u6210\u7684\u5411\u91cf\uff0c\u5224\u65ad\u4e0b\u5217\u8868\u8fbe\u5f0f\u662f\u5426\u6b63\u786e\u00b6","text":""},{"location":"100-Numpy-Exercises/#28","title":"28. \u4e0b\u5217\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\u00b6","text":"<pre>np.array(0) / np.array(0)\nnp.array(0) // np.array(0)\nnp.array([np.nan]).astype(int).astype(float)\n</pre>"},{"location":"100-Numpy-Exercises/#29-0","title":"29. \u820d\u5165\u6d6e\u70b9\u6570\u6570\u7ec4\uff0c\u4f7f\u5176\u5c3d\u53ef\u80fd\u8fdc\u79bb0\u00b6","text":"<p>\u5373-0.3\uff0c -0.5\uff0c -0.6\u7b49\u8fd1\u4f3c\u4e3a-1\uff0c\u800c\u975e0\uff1b 0.3\uff0c 0.5\uff0c 0.6\u7b49\u8fd1\u4f3c\u4e3a1\uff0c\u800c\u975e0.</p>"},{"location":"100-Numpy-Exercises/#30","title":"30. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u76f8\u540c\u7684\u5143\u7d20\u00b6","text":""},{"location":"100-Numpy-Exercises/#31-numpy","title":"31. \u5982\u4f55\u5ffd\u89c6\u6240\u6709Numpy\u7684\u8b66\u544a\uff08\u4e0d\u63a8\u8350\uff09\u00b6","text":""},{"location":"100-Numpy-Exercises/#32-true","title":"32. \u4e0b\u9762\u7684\u8868\u8fbe\u5f0f\u4f1a\u8fd4\u56de<code>True</code>\u5417\u00b6","text":"<pre>np.sqrt(-1) == np.emath.sqrt(-1)\n</pre>"},{"location":"100-Numpy-Exercises/#33","title":"33. \u5982\u4f55\u83b7\u53d6\u6628\u5929\uff0c\u4eca\u5929\uff0c\u660e\u5929\u7684\u65e5\u671f\u00b6","text":""},{"location":"100-Numpy-Exercises/#34-2016731","title":"34. \u5982\u4f55\u83b7\u53d62016\u5e747\u6708\u5168\u90e831\u5929\u7684\u65e5\u671f\u00b6","text":""},{"location":"100-Numpy-Exercises/#35-in-placeab-a2","title":"35. \u5982\u4f55\u4ee5\u66ff\u6362\u7684\u65b9\u5f0f\uff08in place\uff09\u8ba1\u7b97$((A+B)*(-A/2))$\uff08\u4e0d\u901a\u8fc7\u590d\u5236\uff09\u00b6","text":""},{"location":"100-Numpy-Exercises/#36-5","title":"36. \u75285\u79cd\u65b9\u6cd5\u63d0\u53d6\u968f\u673a\u6570\u7ec4\u4e2d\u7684\u6574\u6570\u90e8\u5206\u00b6","text":""},{"location":"100-Numpy-Exercises/#37-5x504","title":"37. \u521b\u5efa\u4e00\u4e2a5x5\u7684\u77e9\u9635\uff0c\u6bcf\u884c\u5747\u4e3a0\u52304\u00b6","text":""},{"location":"100-Numpy-Exercises/#38-10","title":"38. \u73b0\u6709\u4e00\u4e2a\u53ef\u4ee5\u751f\u621010\u4e2a\u6574\u6570\u7684\u751f\u6210\u5668\u51fd\u6570\uff0c\u5229\u7528\u5176\u5efa\u7acb\u4e00\u4e2a\u6570\u7ec4\u00b6","text":""},{"location":"100-Numpy-Exercises/#39-100101","title":"39. \u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a10\uff0c\u8303\u56f4\u4ece0\u52301\u7684\u5411\u91cf\uff08\u4e0d\u5305\u62ec0\uff0c1\uff09\u00b6","text":""},{"location":"100-Numpy-Exercises/#40-10","title":"40. \u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a10\u7684\u968f\u673a\u6570\u7ec4\u5e76\u6392\u5e8f\u00b6","text":""},{"location":"100-Numpy-Exercises/#41-npsum","title":"41. \u5bf9\u4e8e\u957f\u5ea6\u8f83\u5c0f\u7684\u6570\u7ec4\uff0c\u5982\u4f55\u66f4\u9ad8\u6548\u5730\u6c42\u548c\uff08\u76f8\u5bf9<code>np.sum</code>\uff09\u00b6","text":""},{"location":"100-Numpy-Exercises/#42-a-b","title":"42. \u68c0\u67e5\u4e24\u4e2a\u6570\u7ec4A\uff0c B\u662f\u5426\u76f8\u7b49\u00b6","text":""},{"location":"100-Numpy-Exercises/#43-read-only","title":"43. \u9650\u5236\u6570\u7ec4\u4e3a\u4e0d\u53ef\u53d8\u6570\u7ec4\uff08read only\uff09\u00b6","text":""},{"location":"100-Numpy-Exercises/#44-10x2","title":"44. \u7ed9\u5b9a10x2\u77e9\u9635\u4ee3\u8868\u5e73\u9762\u5ea7\u6807\u7cfb\u4e2d\u5ea7\u6807\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a\u6781\u5ea7\u6807\u7cfb\u5ea7\u6807\u00b6","text":""},{"location":"100-Numpy-Exercises/#45-100","title":"45. \u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a10\u7684\u968f\u673a\u5411\u91cf\uff0c\u5e76\u5c06\u5176\u4e2d\u6700\u5927\u7684\u6570\u6539\u4e3a0\u00b6","text":""},{"location":"100-Numpy-Exercises/#46-xy01x0-1","title":"46. \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u5316\u7684\u6570\u7ec4\uff0c\u5176\u5143\u7d20\u4e3ax\u8f74\uff0cy\u8f74\u7684\u5ea7\u6807\uff0c\u5e76\u8986\u76d6[0,1]x[0, 1]\u00b6","text":""},{"location":"100-Numpy-Exercises/#47-xy-ccauchy-matrix","title":"47. \u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4X\uff0cY\uff0c \u8ba1\u7b97\u5176\u67ef\u897f\u77e9\u9635C(Cauchy Matrix)\u5e76\u6c42\u5176\u884c\u5217\u5f0f\u00b6","text":"<p>$$C_{ij} = \\frac{1}{x_i-y_j}$$</p>"},{"location":"100-Numpy-Exercises/#48-numpyscalar-type","title":"48. \u6253\u5370Numpy\u6240\u6709\u6807\u91cf\u7c7b\u578b(scalar type)\u53ef\u8868\u793a\u7684\u6700\u503c\u00b6","text":""},{"location":"100-Numpy-Exercises/#49","title":"49. \u6253\u5370\u6570\u7ec4\u6240\u6709\u5143\u7d20\uff08\u4e0d\u7701\u7565\uff09\u00b6","text":""},{"location":"100-Numpy-Exercises/#50","title":"50. \u7ed9\u5b9a\u4e00\u4e2a\u6570\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u51fa\u8ddd\u79bb\u5176\u6700\u8fd1\u7684\u6570\u00b6","text":""},{"location":"100-Numpy-Exercises/#51-xyrgb","title":"51. \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u5316\u7684\u6570\u7ec4\uff0c\u5176\u5143\u7d20\u4e3a\u4e00\u4e2a\u5ea7\u6807(x,y)\u548c\u4e00\u4e2a\u989c\u8272\u53c2\u6570(r,g,b)\u00b6","text":"<p>\u548c46\u9898\u7c7b\u4f3c\u3002</p> <p>\u53e6\u5916\uff0c\u8fd9\u53ef\u4ee5\u662f\u4e00\u4e2a\u50cf\u7d20\u70b9\u7684\u8868\u793a\u65b9\u5f0f</p>"},{"location":"100-Numpy-Exercises/#52-10-2","title":"52. \u8003\u8651\u4e00\u4e2a\u5f62\u72b6\u4e3a\uff0810\uff0c 2\uff09\u7684\u968f\u673a\u5411\u91cf\uff0c\u82e5\u5176\u4ee3\u8868\u4e8c\u7ef4\u5e73\u9762\u4e2d\u7684\u70b9\uff0c\u6c42\u5404\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u00b6","text":""},{"location":"100-Numpy-Exercises/#53-3232","title":"53. \u5c06\u4e00\u4e2a32\u4f4d\u7684\u6d6e\u70b9\u6570\u6570\u7ec4\uff0c\uff08\u4e0d\u4f7f\u7528\u989d\u5916\u5185\u5b58\uff09\u8f6c\u5316\u4e3a32\u4e3a\u7684\u6574\u6570\u6570\u7ec4\u00b6","text":""},{"location":"100-Numpy-Exercises/#54","title":"54. \u5982\u4f55\u8bfb\u53d6\u4e0b\u9762\u7684\u6587\u4ef6\u00b6","text":"<pre><code>1, 2, 3, 4, 5\n6,  ,  , 7, 8\n ,  , 9,10,11\n</code></pre>"},{"location":"100-Numpy-Exercises/#55-pythonenumeratenumpy","title":"55. Python\u5185\u7f6e\u6709<code>enumerate</code>,Numpy\u4e2d\u4e0e\u4e4b\u5bf9\u5e94\u7684\u662f\uff1f\u00b6","text":""},{"location":"100-Numpy-Exercises/#56","title":"56. \u751f\u6210\u4e8c\u7ef4\u9ad8\u65af\u5206\u5e03\u00b6","text":""},{"location":"100-Numpy-Exercises/#57-p","title":"57. \u968f\u673a\u5730\u5728\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u653e\u7f6ep\u4e2a\u5143\u7d20\u00b6","text":""},{"location":"100-Numpy-Exercises/#58","title":"58. \u77e9\u9635\u6bcf\u884c\u8fdb\u884c\u4e2d\u5fc3\u5316\uff08\u51cf\u53bb\u5747\u503c\uff09\u00b6","text":""},{"location":"100-Numpy-Exercises/#59","title":"59. \u6839\u636e\u67d0\u5217\u6570\u636e\u6765\u6392\u5217\u6570\u7ec4\u00b6","text":""},{"location":"100-Numpy-Exercises/#60-0","title":"60. \u5224\u65ad\u4e8c\u7ef4\u6570\u7ec4\u662f\u5426\u542b\u6709\u7a7a\u5217(\u5168\u4e3a0)\u00b6","text":""},{"location":"100-Numpy-Exercises/#61","title":"61. \u7ed9\u5b9a\u4e00\u4e2a\u6570\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u51fa\u8ddd\u79bb\u5176\u6700\u8fd1\u7684\u6570\u00b6","text":"<p>\u4e0e50\u9898\u91cd\u590d.</p>"},{"location":"100-Numpy-Exercises/#62-3-1-1-3","title":"62. \u8003\u8651\u4e24\u4e2a\u6570\u7ec4\uff0c\u5f62\u72b6\u5206\u522b\u662f\uff083\uff0c 1\uff09\uff0c \uff081\uff0c 3\uff09\uff0c\u5982\u4f55\u4f7f\u7528\u8fed\u4ee3\u5668\u5c06\u5176\u76f8\u52a0\uff1f\u00b6","text":""},{"location":"100-Numpy-Exercises/#63","title":"63. \u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u540d\u79f0\u5c5e\u6027\u7684\u6570\u7ec4\u7c7b\u00b6","text":""},{"location":"100-Numpy-Exercises/#64-1","title":"64. \u7ed9\u5b9a\u4e00\u4e2a\u6570\u503c\u5411\u91cf\uff0c\u548c\u4e00\u4e2a\u7d22\u5f15\u5411\u91cf\uff0c\u6839\u636e\u540e\u8005\u7684\u7d22\u5f15\uff0c\u5728\u524d\u8005\u5bf9\u5e94\u4f4d\u7f6e\u52a01\uff08\u6ce8\u610f\u91cd\u590d\u7d22\u5f15\uff09\u00b6","text":""},{"location":"100-Numpy-Exercises/#65-ixf","title":"65. \u6839\u636e\u7d22\u5f15\u5217\u8868I\uff0c\u5bf9\u6570\u503c\u5217\u8868X\u8fdb\u884c\u7d2f\u52a0\uff0c\u5f97\u5230F\u00b6","text":""},{"location":"100-Numpy-Exercises/#66-w-h-3","title":"66. \u7ed9\u5b9a\u4e00\u5f20\u7167\u7247\uff08w, h, 3\uff09\uff0c\u8ba1\u7b97\u5176\u4e2d\u4e0d\u540c\u989c\u8272\u7684\u4e2a\u6570\u00b6","text":""},{"location":"100-Numpy-Exercises/#67","title":"67. \u8003\u8651\u4e00\u4e2a\u56db\u7ef4\u6570\u7ec4\uff0c\u8ba1\u7b97\u540e\u4e24\u4e2a\u8f74\u4e0a\u7684\u5143\u7d20\u548c\u00b6","text":""},{"location":"100-Numpy-Exercises/#68-ds","title":"68. \u7ed9\u5b9a\u5411\u91cfD\uff0c\u6839\u636e\u7d22\u5f15\u6570\u7ec4S\u5f97\u5230\u5b50\u96c6\uff0c\u8ba1\u7b97\u5b50\u96c6\u4e0a\u7684\u5747\u503c\u00b6","text":""},{"location":"100-Numpy-Exercises/#69-dot-product","title":"69. \u83b7\u53d6\u77e9\u9635\u70b9\u4e58(dot product)\u7ed3\u679c\u7684\u5bf9\u89d2\u7ebf\u5143\u7d20\u00b6","text":""},{"location":"100-Numpy-Exercises/#70-1-2-3-4-50","title":"70. \u5982\u4f55\u5728\u6570\u7ec4[1, 2, 3, 4, 5]\u6bcf\u4e24\u4e2a\u503c\u7684\u4e2d\u95f4\u6dfb\u52a0\u4e09\u4e2a0\u00b6","text":""},{"location":"100-Numpy-Exercises/#71-5-5-3-5-5","title":"71. \u7ef4\u5ea6\u5206\u522b\u4e3a\uff085\uff0c 5\uff0c 3\uff09\uff0c \uff085\uff0c 5\uff09\u7684\u4e24\u4e2a\u6570\u7ec4\u76f8\u4e58\u00b6","text":""},{"location":"100-Numpy-Exercises/#72","title":"72. \u4ea4\u6362\u6570\u7ec4\u7684\u4e24\u884c\u00b6","text":""},{"location":"100-Numpy-Exercises/#73-1010","title":"73. \u7ed9\u5b9a10\u4e2a\u4e09\u5143\u7ec4\u63cf\u8ff010\u4e2a\u4e09\u89d2\u5f62\uff0c\u627e\u51fa\u6240\u6709\u8fb9\u7684\u96c6\u5408\u00b6","text":""},{"location":"100-Numpy-Exercises/#74-ac-npbincounta-ca","title":"74. \u7ed9\u5b9aA\uff0c\u6211\u4eec\u6709C = np.bincount(A), \u90a3\u4e48\uff0c\u7ed9\u5b9aC\uff0c\u5982\u4f55\u627e\u5230\u5bf9\u5e94\u7684A\uff1f\u00b6","text":""},{"location":"100-Numpy-Exercises/#75","title":"75. \u7528\u6ed1\u52a8\u7a97\u53e3\u8ba1\u7b97\u5e73\u5747\u503c\u00b6","text":""},{"location":"100-Numpy-Exercises/#76-z0-z1-z2-z1-z2-z3-z-3-z-2-z-1","title":"76. \u7ed9\u5b9a\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u7ec4\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u4f7f\u5f97\u7b2c\u4e00\u884c\u4e3aZ[0], Z[1], Z[2], \u7b2c\u4e8c\u884c\u4e3aZ[1], Z[2], Z[3], \u4f9d\u6b64\u7c7b\u63a8\uff0c\u6700\u540e\u4e00\u884c\u4e3aZ[-3], Z[-2], Z[-1]\u00b6","text":""},{"location":"100-Numpy-Exercises/#77","title":"77. \u5982\u4f55\u539f\u5730\u5bf9\u5e03\u5c14\u503c\u53d6\u53cd\uff0c\u5982\u4f55\u539f\u5730\u6539\u53d8\u6570\u5b57\u7684\u6b63\u8d1f\u00b6","text":""},{"location":"100-Numpy-Exercises/#78-pi-p0i-p1ip0p1","title":"78. \u8ba1\u7b97\u70b9p\u5230\u5404\u4e2a\u76f4\u7ebfi\u7684\u8ddd\u79bb, \u5176\u4e2d\u76f4\u7ebf\u7531(P0[i]\uff0c P1[i])\u8868\u793a\uff0cP0\uff0cP1\u4e3a\u4e00\u7cfb\u5217\u5bf9\u5e94\u7684\u70b9\u00b6","text":""},{"location":"100-Numpy-Exercises/#79-p0p0jp0i-p1i","title":"79. \u63a5\u4e0a\u9898\uff0c\u5982\u4f55\u8ba1\u7b97P0\u4e2d\u5404\u70b9P0[j]\u5230\u5404\u76f4\u7ebf\uff08P0[i], P1[i]\uff09\u7684\u8ddd\u79bb\u00b6","text":""},{"location":"100-Numpy-Exercises/#80","title":"80. \u7ed9\u5b9a\u4efb\u610f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u63a5\u53d7\u6570\u7ec4\u548c\u4e00\u4e2a\u5143\u7d20\u4e3a\u53c2\u6570\uff0c\u8fd4\u56de\u4ee5\u5143\u7d20\u4e3a\u4e2d\u5fc3\u7684\u5b50\u96c6\uff08\u5fc5\u8981\u7684\u65f6\u5019\u53ef\u4ee5\u8fdb\u884c\u586b\u5145\uff09\u00b6","text":""},{"location":"100-Numpy-Exercises/#81-z-1234567891011121314-1234-2345-3456-11121314","title":"81. \u6709\u6570\u7ec4Z = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\uff0c \u5982\u4f55\u751f\u6210 = [[1,2,3,4], [2,3,4,5], [3,4,5,6], ..., [11,12,13,14]]\uff1f\u00b6","text":""},{"location":"100-Numpy-Exercises/#82","title":"82. \u8ba1\u7b97\u77e9\u9635\u7684\u79e9\u00b6","text":""},{"location":"100-Numpy-Exercises/#83","title":"83. \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u4f17\u6570\u00b6","text":""},{"location":"100-Numpy-Exercises/#84-10x103x3","title":"84. \u4ece10x10\u7684\u77e9\u9635\u4e2d\u62bd\u53d6\u51fa\u6240\u6709\u76843x3\u77e9\u9635\u00b6","text":""},{"location":"100-Numpy-Exercises/#85-zi-j-zj-i","title":"85. \u6784\u9020\u4e8c\u7ef4\u6570\u7ec4\u7684\u5b50\u7c7b\uff0c\u4f7f\u5f97Z[i, j] = Z[j, i]\u00b6","text":""},{"location":"100-Numpy-Exercises/#86-pn-npn-1-tensor-product","title":"86. \u7ed9\u5b9ap\u4e2a(n, n)\u77e9\u9635\u548cp\u4e2a(n, 1)\u5411\u91cf\uff0c \u8ba1\u7b97\u5f20\u91cf\u4e58\u6cd5(tensor product)\u00b6","text":""},{"location":"100-Numpy-Exercises/#87-16x164x4","title":"87. \u7ed9\u5b9a16x16\u7684\u6570\u7ec4\uff0c\u5c06\u5176\u5206\u62104x4\u7684\u5c0f\u5757\uff0c\u6c42\u6bcf\u5757\u7684\u548c\u00b6","text":""},{"location":"100-Numpy-Exercises/#88","title":"88. \u7528\u6570\u7ec4\u5b9e\u73b0\u751f\u5b58\u6e38\u620f\u00b6","text":""},{"location":"100-Numpy-Exercises/#89-n","title":"89. \u83b7\u53d6\u6570\u7ec4\u6700\u5927\u7684n\u4e2a\u503c\u00b6","text":""},{"location":"100-Numpy-Exercises/#90","title":"90. \u7ed9\u5b9a\u4efb\u610f\u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u8ba1\u7b97\u5176\u7b1b\u5361\u5c14\u79ef\u00b6","text":""},{"location":"100-Numpy-Exercises/#91","title":"91. \u5c06\u4e00\u822c\u7684\u6570\u7ec4\u8f6c\u5316\u4e3a\u7ed3\u6784\u5316\u6570\u7ec4\u00b6","text":""},{"location":"100-Numpy-Exercises/#92","title":"92. \u7528\u4e09\u79cd\u65b9\u6cd5\u8ba1\u7b97\u5927\u5411\u91cf\u7684\u4e09\u6b21\u65b9\u00b6","text":""},{"location":"100-Numpy-Exercises/#93-8322ab-bab","title":"93. \u8003\u8651\u5f62\u72b6\uff088,3\uff09\u548c\uff082,2\uff09\u7684\u4e24\u4e2a\u6570\u7ec4A\u548cB. \u5982\u4f55\u67e5\u627e\u5305\u542bB\u7684\u6bcf\u4e00\u884c\u5143\u7d20\u7684A\u884c\uff0c\u4e0d\u8003\u8651B\u4e2d\u5143\u7d20\u7684\u987a\u5e8f\u00b6","text":""},{"location":"100-Numpy-Exercises/#94-10-3","title":"94. \u7ed9\u5b9a\uff0810\uff0c 3\uff09\u7684\u77e9\u9635\uff0c \u627e\u51fa\u5305\u542b\u4e0d\u540c\u5143\u7d20\u7684\u884c\u00b6","text":""},{"location":"100-Numpy-Exercises/#95","title":"95. \u5c06\u7ed9\u5b9a\u7684\u6574\u6570\u5411\u91cf\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u77e9\u9635\u00b6","text":""},{"location":"100-Numpy-Exercises/#96","title":"96. \u7ed9\u5b9a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u62bd\u53d6\u6240\u6709\u4e0d\u540c\u7684\u884c\u00b6","text":""},{"location":"100-Numpy-Exercises/#97-ab-npeinsumouter-inner-sum-mul","title":"97. \u8003\u8651\u4e24\u4e2a\u6570\u7ec4A\uff0cB\uff0c \u4f7f\u7528np.einsum\u5199\u51fa\u77e9\u9635\u95f4\u7684outer, inner, sum, mul\u51fd\u6570\u00b6","text":""},{"location":"100-Numpy-Exercises/#98-x-y","title":"98. \u7528\u4e24\u4e2a\u5411\u91cf(X, Y)\u63cf\u8ff0\u4e00\u6761\u8f68\u9053\uff0c\u5982\u4f55\u5bf9\u5176\u8fdb\u884c\u7b49\u8ddd\u62bd\u6837\u00b6","text":""},{"location":"100-Numpy-Exercises/#99-nn","title":"99. \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570n\uff0c\u63d0\u53d6\u6240\u6709\u4ec5\u5305\u542b\u6574\u6570\uff0c\u4e14\u5143\u7d20\u548c\u4e3an\u7684\u884c\u00b6","text":""},{"location":"100-Numpy-Exercises/#100-95","title":"100. \u7ed9\u5b9a\u4e00\u4e2a\u5411\u91cf\uff0c\u8ba1\u7b97\u5176\u5747\u503c\u768495%\u7684\u7f6e\u4fe1\u533a\u95f4\u00b6","text":""}]}